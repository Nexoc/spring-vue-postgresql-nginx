{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { defineComponent, isVue2, h } from 'vue-demi';\n\n/* eslint-disable no-debugger, no-console */\nvar VueDrawingCanvas = /*#__PURE__*/defineComponent({\n  name: 'VueDrawingCanvas',\n  props: {\n    strokeType: {\n      type: String,\n      validator: value => {\n        return ['dash', 'line', 'square', 'circle', 'triangle', 'half_triangle'].indexOf(value) !== -1;\n      },\n      default: () => 'dash'\n    },\n    fillShape: {\n      type: Boolean,\n      default: () => false\n    },\n    width: {\n      type: [String, Number],\n      default: () => 600\n    },\n    height: {\n      type: [String, Number],\n      default: () => 400\n    },\n    image: {\n      type: String,\n      default: () => ''\n    },\n    eraser: {\n      type: Boolean,\n      default: () => false\n    },\n    color: {\n      type: String,\n      default: () => '#000000'\n    },\n    lineWidth: {\n      type: Number,\n      default: () => 5\n    },\n    lineCap: {\n      type: String,\n      validator: value => {\n        return ['round', 'square', 'butt'].indexOf(value) !== -1;\n      },\n      default: () => 'round'\n    },\n    lineJoin: {\n      type: String,\n      validator: value => {\n        return ['miter', 'round', 'bevel'].indexOf(value) !== -1;\n      },\n      default: () => 'miter'\n    },\n    lock: {\n      type: Boolean,\n      default: () => false\n    },\n    styles: {\n      type: [Array, String, Object]\n    },\n    classes: {\n      type: [Array, String, Object]\n    },\n    backgroundColor: {\n      type: String,\n      default: () => '#FFFFFF'\n    },\n    backgroundImage: {\n      type: String,\n      default: () => null\n    },\n    watermark: {\n      type: Object,\n      default: () => null\n    },\n    saveAs: {\n      type: String,\n      validator: value => {\n        return ['jpeg', 'png'].indexOf(value) !== -1;\n      },\n      default: () => 'png'\n    },\n    canvasId: {\n      type: String,\n      default: () => 'VueDrawingCanvas'\n    },\n    initialImage: {\n      type: Array,\n      default: () => []\n    },\n    additionalImages: {\n      type: Array,\n      default: () => []\n    },\n    outputWidth: {\n      type: Number\n    },\n    outputHeight: {\n      type: Number\n    }\n  },\n  data() {\n    return {\n      loadedImage: null,\n      drawing: false,\n      context: null,\n      images: [],\n      strokes: {\n        type: '',\n        from: {\n          x: 0,\n          y: 0\n        },\n        coordinates: [],\n        color: '',\n        width: '',\n        fill: false,\n        lineCap: '',\n        lineJoin: ''\n      },\n      guides: [],\n      trash: []\n    };\n  },\n  mounted() {\n    this.setContext();\n    this.$nextTick(() => {\n      this.drawInitialImage();\n      this.drawAdditionalImages();\n    });\n  },\n  watch: {\n    backgroundImage: function () {\n      this.loadedImage = null;\n    }\n  },\n  methods: {\n    async setContext() {\n      let canvas = document.querySelector('#' + this.canvasId);\n      this.context = this.context ? this.context : canvas.getContext('2d');\n      await this.setBackground();\n    },\n    drawInitialImage() {\n      if (this.initialImage && this.initialImage.length > 0) {\n        // @ts-ignore\n        this.images = [].concat(this.images, this.initialImage);\n        this.redraw(true);\n      }\n    },\n    drawAdditionalImages() {\n      if (this.additionalImages && this.additionalImages.length > 0) {\n        let canvas = document.querySelector('#' + this.canvasId);\n        this.additionalImages.forEach(watermarkObject => {\n          this.drawWatermark(canvas, this.context, watermarkObject);\n        });\n      }\n    },\n    clear() {\n      this.context.clearRect(0, 0, Number(this.width), Number(this.height));\n    },\n    async setBackground() {\n      this.clear();\n      this.context.fillStyle = this.backgroundColor;\n      this.context.fillRect(0, 0, Number(this.width), Number(this.height));\n      await this.$nextTick(async () => {\n        await this.drawBackgroundImage();\n      });\n      this.save();\n    },\n    async drawBackgroundImage() {\n      if (!this.loadedImage) {\n        return new Promise(resolve => {\n          if (!this.backgroundImage) {\n            resolve();\n            return;\n          }\n          const image = new Image();\n          image.src = this.backgroundImage;\n          image.onload = () => {\n            this.context.drawImage(image, 0, 0, Number(this.width), Number(this.height));\n            this.loadedImage = image;\n            resolve();\n          };\n        });\n      } else {\n        this.context.drawImage(this.loadedImage, 0, 0, Number(this.width), Number(this.height));\n      }\n    },\n    getCoordinates(event) {\n      let x, y;\n      if (event.touches && event.touches.length > 0) {\n        let canvas = document.querySelector('#' + this.canvasId);\n        let rect = canvas.getBoundingClientRect();\n        x = event.touches[0].clientX - rect.left;\n        y = event.touches[0].clientY - rect.top;\n      } else {\n        x = event.offsetX;\n        y = event.offsetY;\n      }\n      return {\n        x: x,\n        y: y\n      };\n    },\n    startDraw(event) {\n      if (!this.lock) {\n        this.drawing = true;\n        let coordinate = this.getCoordinates(event);\n        this.strokes = {\n          type: this.eraser ? 'eraser' : this.strokeType,\n          from: coordinate,\n          coordinates: [],\n          color: this.eraser ? this.backgroundColor : this.color,\n          width: this.lineWidth,\n          fill: this.eraser || this.strokeType === 'dash' || this.strokeType === 'line' ? false : this.fillShape,\n          lineCap: this.lineCap,\n          lineJoin: this.lineJoin\n        };\n        this.guides = [];\n      }\n    },\n    draw(event) {\n      if (this.drawing) {\n        if (!this.context) {\n          this.setContext();\n        }\n        let coordinate = this.getCoordinates(event);\n        if (this.eraser || this.strokeType === 'dash') {\n          this.strokes.coordinates.push(coordinate);\n          this.drawShape(this.context, this.strokes, false);\n        } else {\n          switch (this.strokeType) {\n            case 'line':\n              this.guides = [{\n                x: coordinate.x,\n                y: coordinate.y\n              }];\n              break;\n            case 'square':\n              this.guides = [{\n                x: coordinate.x,\n                y: this.strokes.from.y\n              }, {\n                x: coordinate.x,\n                y: coordinate.y\n              }, {\n                x: this.strokes.from.x,\n                y: coordinate.y\n              }, {\n                x: this.strokes.from.x,\n                y: this.strokes.from.y\n              }];\n              break;\n            case 'triangle':\n              let center = Math.floor((coordinate.x - this.strokes.from.x) / 2) < 0 ? Math.floor((coordinate.x - this.strokes.from.x) / 2) * -1 : Math.floor((coordinate.x - this.strokes.from.x) / 2);\n              let width = this.strokes.from.x < coordinate.x ? this.strokes.from.x + center : this.strokes.from.x - center;\n              this.guides = [{\n                x: coordinate.x,\n                y: this.strokes.from.y\n              }, {\n                x: width,\n                y: coordinate.y\n              }, {\n                x: this.strokes.from.x,\n                y: this.strokes.from.y\n              }];\n              break;\n            case 'half_triangle':\n              this.guides = [{\n                x: coordinate.x,\n                y: this.strokes.from.y\n              }, {\n                x: this.strokes.from.x,\n                y: coordinate.y\n              }, {\n                x: this.strokes.from.x,\n                y: this.strokes.from.y\n              }];\n              break;\n            case 'circle':\n              let radiusX = this.strokes.from.x - coordinate.x < 0 ? (this.strokes.from.x - coordinate.x) * -1 : this.strokes.from.x - coordinate.x;\n              this.guides = [{\n                x: this.strokes.from.x > coordinate.x ? this.strokes.from.x - radiusX : this.strokes.from.x + radiusX,\n                y: this.strokes.from.y\n              }, {\n                x: radiusX,\n                y: radiusX\n              }];\n              break;\n          }\n          this.drawGuide(true);\n        }\n      }\n    },\n    drawGuide(closingPath) {\n      this.redraw(true);\n      this.$nextTick(() => {\n        this.context.strokeStyle = this.color;\n        this.context.lineWidth = 1;\n        this.context.lineJoin = this.lineJoin;\n        this.context.lineCap = this.lineCap;\n        this.context.beginPath();\n        this.context.setLineDash([15, 15]);\n        if (this.strokes.type === 'circle') {\n          this.context.ellipse(this.guides[0].x, this.guides[0].y, this.guides[1].x, this.guides[1].y, 0, 0, Math.PI * 2);\n        } else {\n          this.context.moveTo(this.strokes.from.x, this.strokes.from.y);\n          this.guides.forEach(coordinate => {\n            this.context.lineTo(coordinate.x, coordinate.y);\n          });\n          if (closingPath) {\n            this.context.closePath();\n          }\n        }\n        this.context.stroke();\n      });\n    },\n    drawShape(context, strokes, closingPath) {\n      context.strokeStyle = strokes.color;\n      context.fillStyle = strokes.color;\n      context.lineWidth = strokes.width;\n      context.lineJoin = strokes.lineJoin === undefined ? this.lineJoin : strokes.lineJoin;\n      context.lineCap = strokes.lineCap === undefined ? this.lineCap : strokes.lineCap;\n      context.beginPath();\n      context.setLineDash([]);\n      if (strokes.type === 'circle') {\n        context.ellipse(strokes.coordinates[0].x, strokes.coordinates[0].y, strokes.coordinates[1].x, strokes.coordinates[1].y, 0, 0, Math.PI * 2);\n      } else {\n        context.moveTo(strokes.from.x, strokes.from.y);\n        strokes.coordinates.forEach(stroke => {\n          context.lineTo(stroke.x, stroke.y);\n        });\n        if (closingPath) {\n          context.closePath();\n        }\n      }\n      if (strokes.fill) {\n        context.fill();\n      } else {\n        context.stroke();\n      }\n    },\n    stopDraw() {\n      if (this.drawing) {\n        this.strokes.coordinates = this.guides.length > 0 ? this.guides : this.strokes.coordinates;\n        this.images.push(this.strokes);\n        this.redraw(true);\n        this.drawing = false;\n        this.trash = [];\n      }\n    },\n    reset() {\n      if (!this.lock) {\n        this.images = [];\n        this.strokes = {\n          type: '',\n          coordinates: [],\n          color: '',\n          width: '',\n          fill: false,\n          lineCap: '',\n          lineJoin: ''\n        };\n        this.guides = [];\n        this.trash = [];\n        this.redraw(true);\n      }\n    },\n    undo() {\n      if (!this.lock) {\n        let strokes = this.images.pop();\n        if (strokes) {\n          this.trash.push(strokes);\n          this.redraw(true);\n        }\n      }\n    },\n    redo() {\n      if (!this.lock) {\n        let strokes = this.trash.pop();\n        if (strokes) {\n          this.images.push(strokes);\n          this.redraw(true);\n        }\n      }\n    },\n    async redraw(output) {\n      output = typeof output !== 'undefined' ? output : true;\n      await this.setBackground().then(() => {\n        this.drawAdditionalImages();\n      }).then(() => {\n        let baseCanvas = document.createElement('canvas');\n        let baseCanvasContext = baseCanvas.getContext('2d');\n        baseCanvas.width = Number(this.width);\n        baseCanvas.height = Number(this.height);\n        if (baseCanvasContext) {\n          this.images.forEach(stroke => {\n            if (baseCanvasContext) {\n              baseCanvasContext.globalCompositeOperation = stroke.type === 'eraser' ? 'destination-out' : 'source-over';\n              if (stroke.type !== 'circle' || stroke.type === 'circle' && stroke.coordinates.length > 0) {\n                this.drawShape(baseCanvasContext, stroke, stroke.type === 'eraser' || stroke.type === 'dash' || stroke.type === 'line' ? false : true);\n              }\n            }\n          });\n          this.context.drawImage(baseCanvas, 0, 0, Number(this.width), Number(this.height));\n        }\n      }).then(() => {\n        if (output) {\n          this.save();\n        }\n      });\n    },\n    wrapText(context, text, x, y, maxWidth, lineHeight) {\n      const newLineRegex = /(\\r\\n|\\n\\r|\\n|\\r)+/g;\n      const whitespaceRegex = /\\s+/g;\n      var lines = text.split(newLineRegex).filter(word => word.length > 0);\n      for (let lineNumber = 0; lineNumber < lines.length; lineNumber++) {\n        var words = lines[lineNumber].split(whitespaceRegex).filter(word => word.length > 0);\n        var line = '';\n        for (var n = 0; n < words.length; n++) {\n          var testLine = line + words[n] + ' ';\n          var metrics = context.measureText(testLine);\n          var testWidth = metrics.width;\n          if (testWidth > maxWidth && n > 0) {\n            if (this.watermark && this.watermark.fontStyle && this.watermark.fontStyle.drawType && this.watermark.fontStyle.drawType === 'stroke') {\n              context.strokeText(line, x, y);\n            } else {\n              context.fillText(line, x, y);\n            }\n            line = words[n] + ' ';\n            y += lineHeight;\n          } else {\n            line = testLine;\n          }\n        }\n        if (this.watermark && this.watermark.fontStyle && this.watermark.fontStyle.drawType && this.watermark.fontStyle.drawType === 'stroke') {\n          context.strokeText(line, x, y);\n        } else {\n          context.fillText(line, x, y);\n        }\n        y += words.length > 0 ? lineHeight : 0;\n      }\n    },\n    save() {\n      let canvas = document.querySelector('#' + this.canvasId);\n      if (this.watermark) {\n        let temp = document.createElement('canvas');\n        let ctx = temp.getContext('2d');\n        if (ctx) {\n          temp.width = Number(this.width);\n          temp.height = Number(this.height);\n          ctx.drawImage(canvas, 0, 0, Number(this.width), Number(this.height));\n          this.drawWatermark(temp, ctx, this.watermark);\n        }\n      } else {\n        let temp = document.createElement('canvas');\n        let tempCtx = temp.getContext('2d');\n        let tempWidth = this.outputWidth === undefined ? this.width : this.outputWidth;\n        let tempHeight = this.outputHeight === undefined ? this.height : this.outputHeight;\n        temp.width = Number(tempWidth);\n        temp.height = Number(tempHeight);\n        if (tempCtx) {\n          tempCtx.drawImage(canvas, 0, 0, Number(tempWidth), Number(tempHeight));\n          this.$emit('update:image', temp.toDataURL('image/' + this.saveAs, 1));\n          return temp.toDataURL('image/' + this.saveAs, 1);\n        }\n      }\n    },\n    drawWatermark(canvas, ctx, watermark) {\n      if (watermark.type === 'Image') {\n        let imageWidth = watermark.imageStyle ? watermark.imageStyle.width ? watermark.imageStyle.width : Number(this.width) : Number(this.width);\n        let imageHeight = watermark.imageStyle ? watermark.imageStyle.height ? watermark.imageStyle.height : Number(this.height) : Number(this.height);\n        const image = new Image();\n        image.src = watermark.source;\n        image.onload = () => {\n          if (watermark && ctx) {\n            ctx.drawImage(image, watermark.x, watermark.y, Number(imageWidth), Number(imageHeight));\n          }\n          let temp = document.createElement('canvas');\n          let tempCtx = temp.getContext('2d');\n          let tempWidth = this.outputWidth === undefined ? this.width : this.outputWidth;\n          let tempHeight = this.outputHeight === undefined ? this.height : this.outputHeight;\n          temp.width = Number(tempWidth);\n          temp.height = Number(tempHeight);\n          if (tempCtx) {\n            tempCtx.drawImage(canvas, 0, 0, Number(tempWidth), Number(tempHeight));\n            this.$emit('update:image', temp.toDataURL('image/' + this.saveAs, 1));\n            return temp.toDataURL('image/' + this.saveAs, 1);\n          }\n        };\n      } else if (watermark.type === 'Text') {\n        let font = watermark.fontStyle ? watermark.fontStyle.font ? watermark.fontStyle.font : '20px serif' : '20px serif';\n        let align = watermark.fontStyle ? watermark.fontStyle.textAlign ? watermark.fontStyle.textAlign : 'start' : 'start';\n        let baseline = watermark.fontStyle ? watermark.fontStyle.textBaseline ? watermark.fontStyle.textBaseline : 'alphabetic' : 'alphabetic';\n        let color = watermark.fontStyle ? watermark.fontStyle.color ? watermark.fontStyle.color : '#000000' : '#000000';\n        ctx.font = font;\n        ctx.textAlign = align;\n        ctx.textBaseline = baseline;\n        if (watermark.fontStyle && watermark.fontStyle.rotate) {\n          let centerX, centerY;\n          if (watermark.fontStyle && watermark.fontStyle.width) {\n            centerX = watermark.x + Math.floor(watermark.fontStyle.width / 2);\n          } else {\n            centerX = watermark.x;\n          }\n          if (watermark.fontStyle && watermark.fontStyle.lineHeight) {\n            centerY = watermark.y + Math.floor(watermark.fontStyle.lineHeight / 2);\n          } else {\n            centerY = watermark.y;\n          }\n          ctx.translate(centerX, centerY);\n          ctx.rotate(watermark.fontStyle.rotate * Math.PI / 180);\n          ctx.translate(centerX * -1, centerY * -1);\n        }\n        if (watermark.fontStyle && watermark.fontStyle.drawType && watermark.fontStyle.drawType === 'stroke') {\n          ctx.strokeStyle = watermark.fontStyle.color;\n          if (watermark.fontStyle && watermark.fontStyle.width) {\n            this.wrapText(ctx, watermark.source, watermark.x, watermark.y, watermark.fontStyle.width, watermark.fontStyle.lineHeight);\n          } else {\n            ctx.strokeText(watermark.source, watermark.x, watermark.y);\n          }\n        } else {\n          ctx.fillStyle = color;\n          if (watermark.fontStyle && watermark.fontStyle.width) {\n            this.wrapText(ctx, watermark.source, watermark.x, watermark.y, watermark.fontStyle.width, watermark.fontStyle.lineHeight);\n          } else {\n            ctx.fillText(watermark.source, watermark.x, watermark.y);\n          }\n        }\n        let temp = document.createElement('canvas');\n        let tempCtx = temp.getContext('2d');\n        let tempWidth = this.outputWidth === undefined ? this.width : this.outputWidth;\n        let tempHeight = this.outputHeight === undefined ? this.height : this.outputHeight;\n        temp.width = Number(tempWidth);\n        temp.height = Number(tempHeight);\n        if (tempCtx) {\n          tempCtx.drawImage(canvas, 0, 0, Number(tempWidth), Number(tempHeight));\n          this.$emit('update:image', temp.toDataURL('image/' + this.saveAs, 1));\n          return temp.toDataURL('image/' + this.saveAs, 1);\n        }\n      }\n    },\n    isEmpty() {\n      return this.images.length > 0 ? false : true;\n    },\n    getAllStrokes() {\n      return this.images;\n    }\n  },\n  render() {\n    if (isVue2) {\n      return h('canvas', {\n        attrs: {\n          id: this.canvasId,\n          width: Number(this.width),\n          height: Number(this.height)\n        },\n        style: {\n          'touchAction': 'none',\n          // @ts-ignore\n          ...this.styles\n        },\n        class: this.classes,\n        on: {\n          mousedown: event => this.startDraw(event),\n          mousemove: event => this.draw(event),\n          mouseup: () => this.stopDraw(),\n          mouseleave: () => this.stopDraw(),\n          touchstart: event => this.startDraw(event),\n          touchmove: event => this.draw(event),\n          touchend: () => this.stopDraw(),\n          touchleave: () => this.stopDraw(),\n          touchcancel: () => this.stopDraw(),\n          pointerdown: event => this.startDraw(event),\n          pointermove: event => this.draw(event),\n          pointerup: () => this.stopDraw(),\n          pointerleave: () => this.stopDraw(),\n          pointercancel: () => this.stopDraw()\n        },\n        ...this.$props\n      });\n    }\n    return h('canvas', {\n      id: this.canvasId,\n      height: Number(this.height),\n      width: Number(this.width),\n      style: {\n        'touchAction': 'none',\n        // @ts-ignore\n        ...this.styles\n      },\n      class: this.classes,\n      onMousedown: $event => this.startDraw($event),\n      onMousemove: $event => this.draw($event),\n      onMouseup: () => this.stopDraw(),\n      onMouseleave: () => this.stopDraw(),\n      onTouchstart: $event => this.startDraw($event),\n      onTouchmove: $event => this.draw($event),\n      onTouchend: () => this.stopDraw(),\n      onTouchleave: () => this.stopDraw(),\n      onTouchcancel: () => this.stopDraw(),\n      onPointerdown: $event => this.startDraw($event),\n      onPointermove: $event => this.draw($event),\n      onPointerup: () => this.stopDraw(),\n      onPointerleave: () => this.stopDraw(),\n      onPointercancel: () => this.stopDraw()\n    });\n  }\n});\nexport { VueDrawingCanvas as default };","map":{"version":3,"names":["defineComponent","isVue2","h","VueDrawingCanvas","name","props","strokeType","type","String","validator","value","indexOf","default","fillShape","Boolean","width","Number","height","image","eraser","color","lineWidth","lineCap","lineJoin","lock","styles","Array","Object","classes","backgroundColor","backgroundImage","watermark","saveAs","canvasId","initialImage","additionalImages","outputWidth","outputHeight","data","loadedImage","drawing","context","images","strokes","from","x","y","coordinates","fill","guides","trash","mounted","setContext","$nextTick","drawInitialImage","drawAdditionalImages","watch","methods","canvas","document","querySelector","getContext","setBackground","length","concat","redraw","forEach","watermarkObject","drawWatermark","clear","clearRect","fillStyle","fillRect","drawBackgroundImage","save","Promise","resolve","Image","src","onload","drawImage","getCoordinates","event","touches","rect","getBoundingClientRect","clientX","left","clientY","top","offsetX","offsetY","startDraw","coordinate","draw","push","drawShape","center","Math","floor","radiusX","drawGuide","closingPath","strokeStyle","beginPath","setLineDash","ellipse","PI","moveTo","lineTo","closePath","stroke","undefined","stopDraw","reset","undo","pop","redo","output","then","baseCanvas","createElement","baseCanvasContext","globalCompositeOperation","wrapText","text","maxWidth","lineHeight","newLineRegex","whitespaceRegex","lines","split","filter","word","lineNumber","words","line","n","testLine","metrics","measureText","testWidth","fontStyle","drawType","strokeText","fillText","temp","ctx","tempCtx","tempWidth","tempHeight","$emit","toDataURL","imageWidth","imageStyle","imageHeight","source","font","align","textAlign","baseline","textBaseline","rotate","centerX","centerY","translate","isEmpty","getAllStrokes","render","attrs","id","style","class","on","mousedown","mousemove","mouseup","mouseleave","touchstart","touchmove","touchend","touchleave","touchcancel","pointerdown","pointermove","pointerup","pointerleave","pointercancel","$props","onMousedown","$event","onMousemove","onMouseup","onMouseleave","onTouchstart","onTouchmove","onTouchend","onTouchleave","onTouchcancel","onPointerdown","onPointermove","onPointerup","onPointerleave","onPointercancel"],"sources":["/home/nexoc/JS/frontend/frontend-vue/node_modules/vue-drawing-canvas/dist/vue-drawing-canvas.esm.js"],"sourcesContent":["import { defineComponent, isVue2, h } from 'vue-demi';\n\n/* eslint-disable no-debugger, no-console */\nvar VueDrawingCanvas = /*#__PURE__*/defineComponent({\n  name: 'VueDrawingCanvas',\n  props: {\n    strokeType: {\n      type: String,\n      validator: value => {\n        return ['dash', 'line', 'square', 'circle', 'triangle', 'half_triangle'].indexOf(value) !== -1;\n      },\n      default: () => 'dash'\n    },\n    fillShape: {\n      type: Boolean,\n      default: () => false\n    },\n    width: {\n      type: [String, Number],\n      default: () => 600\n    },\n    height: {\n      type: [String, Number],\n      default: () => 400\n    },\n    image: {\n      type: String,\n      default: () => ''\n    },\n    eraser: {\n      type: Boolean,\n      default: () => false\n    },\n    color: {\n      type: String,\n      default: () => '#000000'\n    },\n    lineWidth: {\n      type: Number,\n      default: () => 5\n    },\n    lineCap: {\n      type: String,\n      validator: value => {\n        return ['round', 'square', 'butt'].indexOf(value) !== -1;\n      },\n      default: () => 'round'\n    },\n    lineJoin: {\n      type: String,\n      validator: value => {\n        return ['miter', 'round', 'bevel'].indexOf(value) !== -1;\n      },\n      default: () => 'miter'\n    },\n    lock: {\n      type: Boolean,\n      default: () => false\n    },\n    styles: {\n      type: [Array, String, Object]\n    },\n    classes: {\n      type: [Array, String, Object]\n    },\n    backgroundColor: {\n      type: String,\n      default: () => '#FFFFFF'\n    },\n    backgroundImage: {\n      type: String,\n      default: () => null\n    },\n    watermark: {\n      type: Object,\n      default: () => null\n    },\n    saveAs: {\n      type: String,\n      validator: value => {\n        return ['jpeg', 'png'].indexOf(value) !== -1;\n      },\n      default: () => 'png'\n    },\n    canvasId: {\n      type: String,\n      default: () => 'VueDrawingCanvas'\n    },\n    initialImage: {\n      type: Array,\n      default: () => []\n    },\n    additionalImages: {\n      type: Array,\n      default: () => []\n    },\n    outputWidth: {\n      type: Number\n    },\n    outputHeight: {\n      type: Number\n    }\n  },\n\n  data() {\n    return {\n      loadedImage: null,\n      drawing: false,\n      context: null,\n      images: [],\n      strokes: {\n        type: '',\n        from: {\n          x: 0,\n          y: 0\n        },\n        coordinates: [],\n        color: '',\n        width: '',\n        fill: false,\n        lineCap: '',\n        lineJoin: ''\n      },\n      guides: [],\n      trash: []\n    };\n  },\n\n  mounted() {\n    this.setContext();\n    this.$nextTick(() => {\n      this.drawInitialImage();\n      this.drawAdditionalImages();\n    });\n  },\n\n  watch: {\n    backgroundImage: function () {\n      this.loadedImage = null;\n    }\n  },\n  methods: {\n    async setContext() {\n      let canvas = document.querySelector('#' + this.canvasId);\n      this.context = this.context ? this.context : canvas.getContext('2d');\n      await this.setBackground();\n    },\n\n    drawInitialImage() {\n      if (this.initialImage && this.initialImage.length > 0) {\n        // @ts-ignore\n        this.images = [].concat(this.images, this.initialImage);\n        this.redraw(true);\n      }\n    },\n\n    drawAdditionalImages() {\n      if (this.additionalImages && this.additionalImages.length > 0) {\n        let canvas = document.querySelector('#' + this.canvasId);\n        this.additionalImages.forEach(watermarkObject => {\n          this.drawWatermark(canvas, this.context, watermarkObject);\n        });\n      }\n    },\n\n    clear() {\n      this.context.clearRect(0, 0, Number(this.width), Number(this.height));\n    },\n\n    async setBackground() {\n      this.clear();\n      this.context.fillStyle = this.backgroundColor;\n      this.context.fillRect(0, 0, Number(this.width), Number(this.height));\n      await this.$nextTick(async () => {\n        await this.drawBackgroundImage();\n      });\n      this.save();\n    },\n\n    async drawBackgroundImage() {\n      if (!this.loadedImage) {\n        return new Promise(resolve => {\n          if (!this.backgroundImage) {\n            resolve();\n            return;\n          }\n\n          const image = new Image();\n          image.src = this.backgroundImage;\n\n          image.onload = () => {\n            this.context.drawImage(image, 0, 0, Number(this.width), Number(this.height));\n            this.loadedImage = image;\n            resolve();\n          };\n        });\n      } else {\n        this.context.drawImage(this.loadedImage, 0, 0, Number(this.width), Number(this.height));\n      }\n    },\n\n    getCoordinates(event) {\n      let x, y;\n\n      if (event.touches && event.touches.length > 0) {\n        let canvas = document.querySelector('#' + this.canvasId);\n        let rect = canvas.getBoundingClientRect();\n        x = event.touches[0].clientX - rect.left;\n        y = event.touches[0].clientY - rect.top;\n      } else {\n        x = event.offsetX;\n        y = event.offsetY;\n      }\n\n      return {\n        x: x,\n        y: y\n      };\n    },\n\n    startDraw(event) {\n      if (!this.lock) {\n        this.drawing = true;\n        let coordinate = this.getCoordinates(event);\n        this.strokes = {\n          type: this.eraser ? 'eraser' : this.strokeType,\n          from: coordinate,\n          coordinates: [],\n          color: this.eraser ? this.backgroundColor : this.color,\n          width: this.lineWidth,\n          fill: this.eraser || this.strokeType === 'dash' || this.strokeType === 'line' ? false : this.fillShape,\n          lineCap: this.lineCap,\n          lineJoin: this.lineJoin\n        };\n        this.guides = [];\n      }\n    },\n\n    draw(event) {\n      if (this.drawing) {\n        if (!this.context) {\n          this.setContext();\n        }\n\n        let coordinate = this.getCoordinates(event);\n\n        if (this.eraser || this.strokeType === 'dash') {\n          this.strokes.coordinates.push(coordinate);\n          this.drawShape(this.context, this.strokes, false);\n        } else {\n          switch (this.strokeType) {\n            case 'line':\n              this.guides = [{\n                x: coordinate.x,\n                y: coordinate.y\n              }];\n              break;\n\n            case 'square':\n              this.guides = [{\n                x: coordinate.x,\n                y: this.strokes.from.y\n              }, {\n                x: coordinate.x,\n                y: coordinate.y\n              }, {\n                x: this.strokes.from.x,\n                y: coordinate.y\n              }, {\n                x: this.strokes.from.x,\n                y: this.strokes.from.y\n              }];\n              break;\n\n            case 'triangle':\n              let center = Math.floor((coordinate.x - this.strokes.from.x) / 2) < 0 ? Math.floor((coordinate.x - this.strokes.from.x) / 2) * -1 : Math.floor((coordinate.x - this.strokes.from.x) / 2);\n              let width = this.strokes.from.x < coordinate.x ? this.strokes.from.x + center : this.strokes.from.x - center;\n              this.guides = [{\n                x: coordinate.x,\n                y: this.strokes.from.y\n              }, {\n                x: width,\n                y: coordinate.y\n              }, {\n                x: this.strokes.from.x,\n                y: this.strokes.from.y\n              }];\n              break;\n\n            case 'half_triangle':\n              this.guides = [{\n                x: coordinate.x,\n                y: this.strokes.from.y\n              }, {\n                x: this.strokes.from.x,\n                y: coordinate.y\n              }, {\n                x: this.strokes.from.x,\n                y: this.strokes.from.y\n              }];\n              break;\n\n            case 'circle':\n              let radiusX = this.strokes.from.x - coordinate.x < 0 ? (this.strokes.from.x - coordinate.x) * -1 : this.strokes.from.x - coordinate.x;\n              this.guides = [{\n                x: this.strokes.from.x > coordinate.x ? this.strokes.from.x - radiusX : this.strokes.from.x + radiusX,\n                y: this.strokes.from.y\n              }, {\n                x: radiusX,\n                y: radiusX\n              }];\n              break;\n          }\n\n          this.drawGuide(true);\n        }\n      }\n    },\n\n    drawGuide(closingPath) {\n      this.redraw(true);\n      this.$nextTick(() => {\n        this.context.strokeStyle = this.color;\n        this.context.lineWidth = 1;\n        this.context.lineJoin = this.lineJoin;\n        this.context.lineCap = this.lineCap;\n        this.context.beginPath();\n        this.context.setLineDash([15, 15]);\n\n        if (this.strokes.type === 'circle') {\n          this.context.ellipse(this.guides[0].x, this.guides[0].y, this.guides[1].x, this.guides[1].y, 0, 0, Math.PI * 2);\n        } else {\n          this.context.moveTo(this.strokes.from.x, this.strokes.from.y);\n          this.guides.forEach(coordinate => {\n            this.context.lineTo(coordinate.x, coordinate.y);\n          });\n\n          if (closingPath) {\n            this.context.closePath();\n          }\n        }\n\n        this.context.stroke();\n      });\n    },\n\n    drawShape(context, strokes, closingPath) {\n      context.strokeStyle = strokes.color;\n      context.fillStyle = strokes.color;\n      context.lineWidth = strokes.width;\n      context.lineJoin = strokes.lineJoin === undefined ? this.lineJoin : strokes.lineJoin;\n      context.lineCap = strokes.lineCap === undefined ? this.lineCap : strokes.lineCap;\n      context.beginPath();\n      context.setLineDash([]);\n\n      if (strokes.type === 'circle') {\n        context.ellipse(strokes.coordinates[0].x, strokes.coordinates[0].y, strokes.coordinates[1].x, strokes.coordinates[1].y, 0, 0, Math.PI * 2);\n      } else {\n        context.moveTo(strokes.from.x, strokes.from.y);\n        strokes.coordinates.forEach(stroke => {\n          context.lineTo(stroke.x, stroke.y);\n        });\n\n        if (closingPath) {\n          context.closePath();\n        }\n      }\n\n      if (strokes.fill) {\n        context.fill();\n      } else {\n        context.stroke();\n      }\n    },\n\n    stopDraw() {\n      if (this.drawing) {\n        this.strokes.coordinates = this.guides.length > 0 ? this.guides : this.strokes.coordinates;\n        this.images.push(this.strokes);\n        this.redraw(true);\n        this.drawing = false;\n        this.trash = [];\n      }\n    },\n\n    reset() {\n      if (!this.lock) {\n        this.images = [];\n        this.strokes = {\n          type: '',\n          coordinates: [],\n          color: '',\n          width: '',\n          fill: false,\n          lineCap: '',\n          lineJoin: ''\n        };\n        this.guides = [];\n        this.trash = [];\n        this.redraw(true);\n      }\n    },\n\n    undo() {\n      if (!this.lock) {\n        let strokes = this.images.pop();\n\n        if (strokes) {\n          this.trash.push(strokes);\n          this.redraw(true);\n        }\n      }\n    },\n\n    redo() {\n      if (!this.lock) {\n        let strokes = this.trash.pop();\n\n        if (strokes) {\n          this.images.push(strokes);\n          this.redraw(true);\n        }\n      }\n    },\n\n    async redraw(output) {\n      output = typeof output !== 'undefined' ? output : true;\n      await this.setBackground().then(() => {\n        this.drawAdditionalImages();\n      }).then(() => {\n        let baseCanvas = document.createElement('canvas');\n        let baseCanvasContext = baseCanvas.getContext('2d');\n        baseCanvas.width = Number(this.width);\n        baseCanvas.height = Number(this.height);\n\n        if (baseCanvasContext) {\n          this.images.forEach(stroke => {\n            if (baseCanvasContext) {\n              baseCanvasContext.globalCompositeOperation = stroke.type === 'eraser' ? 'destination-out' : 'source-over';\n\n              if (stroke.type !== 'circle' || stroke.type === 'circle' && stroke.coordinates.length > 0) {\n                this.drawShape(baseCanvasContext, stroke, stroke.type === 'eraser' || stroke.type === 'dash' || stroke.type === 'line' ? false : true);\n              }\n            }\n          });\n          this.context.drawImage(baseCanvas, 0, 0, Number(this.width), Number(this.height));\n        }\n      }).then(() => {\n        if (output) {\n          this.save();\n        }\n      });\n    },\n\n    wrapText(context, text, x, y, maxWidth, lineHeight) {\n      const newLineRegex = /(\\r\\n|\\n\\r|\\n|\\r)+/g;\n      const whitespaceRegex = /\\s+/g;\n      var lines = text.split(newLineRegex).filter(word => word.length > 0);\n\n      for (let lineNumber = 0; lineNumber < lines.length; lineNumber++) {\n        var words = lines[lineNumber].split(whitespaceRegex).filter(word => word.length > 0);\n        var line = '';\n\n        for (var n = 0; n < words.length; n++) {\n          var testLine = line + words[n] + ' ';\n          var metrics = context.measureText(testLine);\n          var testWidth = metrics.width;\n\n          if (testWidth > maxWidth && n > 0) {\n            if (this.watermark && this.watermark.fontStyle && this.watermark.fontStyle.drawType && this.watermark.fontStyle.drawType === 'stroke') {\n              context.strokeText(line, x, y);\n            } else {\n              context.fillText(line, x, y);\n            }\n\n            line = words[n] + ' ';\n            y += lineHeight;\n          } else {\n            line = testLine;\n          }\n        }\n\n        if (this.watermark && this.watermark.fontStyle && this.watermark.fontStyle.drawType && this.watermark.fontStyle.drawType === 'stroke') {\n          context.strokeText(line, x, y);\n        } else {\n          context.fillText(line, x, y);\n        }\n\n        y += words.length > 0 ? lineHeight : 0;\n      }\n    },\n\n    save() {\n      let canvas = document.querySelector('#' + this.canvasId);\n\n      if (this.watermark) {\n        let temp = document.createElement('canvas');\n        let ctx = temp.getContext('2d');\n\n        if (ctx) {\n          temp.width = Number(this.width);\n          temp.height = Number(this.height);\n          ctx.drawImage(canvas, 0, 0, Number(this.width), Number(this.height));\n          this.drawWatermark(temp, ctx, this.watermark);\n        }\n      } else {\n        let temp = document.createElement('canvas');\n        let tempCtx = temp.getContext('2d');\n        let tempWidth = this.outputWidth === undefined ? this.width : this.outputWidth;\n        let tempHeight = this.outputHeight === undefined ? this.height : this.outputHeight;\n        temp.width = Number(tempWidth);\n        temp.height = Number(tempHeight);\n\n        if (tempCtx) {\n          tempCtx.drawImage(canvas, 0, 0, Number(tempWidth), Number(tempHeight));\n          this.$emit('update:image', temp.toDataURL('image/' + this.saveAs, 1));\n          return temp.toDataURL('image/' + this.saveAs, 1);\n        }\n      }\n    },\n\n    drawWatermark(canvas, ctx, watermark) {\n      if (watermark.type === 'Image') {\n        let imageWidth = watermark.imageStyle ? watermark.imageStyle.width ? watermark.imageStyle.width : Number(this.width) : Number(this.width);\n        let imageHeight = watermark.imageStyle ? watermark.imageStyle.height ? watermark.imageStyle.height : Number(this.height) : Number(this.height);\n        const image = new Image();\n        image.src = watermark.source;\n\n        image.onload = () => {\n          if (watermark && ctx) {\n            ctx.drawImage(image, watermark.x, watermark.y, Number(imageWidth), Number(imageHeight));\n          }\n\n          let temp = document.createElement('canvas');\n          let tempCtx = temp.getContext('2d');\n          let tempWidth = this.outputWidth === undefined ? this.width : this.outputWidth;\n          let tempHeight = this.outputHeight === undefined ? this.height : this.outputHeight;\n          temp.width = Number(tempWidth);\n          temp.height = Number(tempHeight);\n\n          if (tempCtx) {\n            tempCtx.drawImage(canvas, 0, 0, Number(tempWidth), Number(tempHeight));\n            this.$emit('update:image', temp.toDataURL('image/' + this.saveAs, 1));\n            return temp.toDataURL('image/' + this.saveAs, 1);\n          }\n        };\n      } else if (watermark.type === 'Text') {\n        let font = watermark.fontStyle ? watermark.fontStyle.font ? watermark.fontStyle.font : '20px serif' : '20px serif';\n        let align = watermark.fontStyle ? watermark.fontStyle.textAlign ? watermark.fontStyle.textAlign : 'start' : 'start';\n        let baseline = watermark.fontStyle ? watermark.fontStyle.textBaseline ? watermark.fontStyle.textBaseline : 'alphabetic' : 'alphabetic';\n        let color = watermark.fontStyle ? watermark.fontStyle.color ? watermark.fontStyle.color : '#000000' : '#000000';\n        ctx.font = font;\n        ctx.textAlign = align;\n        ctx.textBaseline = baseline;\n\n        if (watermark.fontStyle && watermark.fontStyle.rotate) {\n          let centerX, centerY;\n\n          if (watermark.fontStyle && watermark.fontStyle.width) {\n            centerX = watermark.x + Math.floor(watermark.fontStyle.width / 2);\n          } else {\n            centerX = watermark.x;\n          }\n\n          if (watermark.fontStyle && watermark.fontStyle.lineHeight) {\n            centerY = watermark.y + Math.floor(watermark.fontStyle.lineHeight / 2);\n          } else {\n            centerY = watermark.y;\n          }\n\n          ctx.translate(centerX, centerY);\n          ctx.rotate(watermark.fontStyle.rotate * Math.PI / 180);\n          ctx.translate(centerX * -1, centerY * -1);\n        }\n\n        if (watermark.fontStyle && watermark.fontStyle.drawType && watermark.fontStyle.drawType === 'stroke') {\n          ctx.strokeStyle = watermark.fontStyle.color;\n\n          if (watermark.fontStyle && watermark.fontStyle.width) {\n            this.wrapText(ctx, watermark.source, watermark.x, watermark.y, watermark.fontStyle.width, watermark.fontStyle.lineHeight);\n          } else {\n            ctx.strokeText(watermark.source, watermark.x, watermark.y);\n          }\n        } else {\n          ctx.fillStyle = color;\n\n          if (watermark.fontStyle && watermark.fontStyle.width) {\n            this.wrapText(ctx, watermark.source, watermark.x, watermark.y, watermark.fontStyle.width, watermark.fontStyle.lineHeight);\n          } else {\n            ctx.fillText(watermark.source, watermark.x, watermark.y);\n          }\n        }\n\n        let temp = document.createElement('canvas');\n        let tempCtx = temp.getContext('2d');\n        let tempWidth = this.outputWidth === undefined ? this.width : this.outputWidth;\n        let tempHeight = this.outputHeight === undefined ? this.height : this.outputHeight;\n        temp.width = Number(tempWidth);\n        temp.height = Number(tempHeight);\n\n        if (tempCtx) {\n          tempCtx.drawImage(canvas, 0, 0, Number(tempWidth), Number(tempHeight));\n          this.$emit('update:image', temp.toDataURL('image/' + this.saveAs, 1));\n          return temp.toDataURL('image/' + this.saveAs, 1);\n        }\n      }\n    },\n\n    isEmpty() {\n      return this.images.length > 0 ? false : true;\n    },\n\n    getAllStrokes() {\n      return this.images;\n    }\n\n  },\n\n  render() {\n    if (isVue2) {\n      return h('canvas', {\n        attrs: {\n          id: this.canvasId,\n          width: Number(this.width),\n          height: Number(this.height)\n        },\n        style: {\n          'touchAction': 'none',\n          // @ts-ignore\n          ...this.styles\n        },\n        class: this.classes,\n        on: {\n          mousedown: event => this.startDraw(event),\n          mousemove: event => this.draw(event),\n          mouseup: () => this.stopDraw(),\n          mouseleave: () => this.stopDraw(),\n          touchstart: event => this.startDraw(event),\n          touchmove: event => this.draw(event),\n          touchend: () => this.stopDraw(),\n          touchleave: () => this.stopDraw(),\n          touchcancel: () => this.stopDraw(),\n          pointerdown: event => this.startDraw(event),\n          pointermove: event => this.draw(event),\n          pointerup: () => this.stopDraw(),\n          pointerleave: () => this.stopDraw(),\n          pointercancel: () => this.stopDraw()\n        },\n        ...this.$props\n      });\n    }\n\n    return h('canvas', {\n      id: this.canvasId,\n      height: Number(this.height),\n      width: Number(this.width),\n      style: {\n        'touchAction': 'none',\n        // @ts-ignore\n        ...this.styles\n      },\n      class: this.classes,\n      onMousedown: $event => this.startDraw($event),\n      onMousemove: $event => this.draw($event),\n      onMouseup: () => this.stopDraw(),\n      onMouseleave: () => this.stopDraw(),\n      onTouchstart: $event => this.startDraw($event),\n      onTouchmove: $event => this.draw($event),\n      onTouchend: () => this.stopDraw(),\n      onTouchleave: () => this.stopDraw(),\n      onTouchcancel: () => this.stopDraw(),\n      onPointerdown: $event => this.startDraw($event),\n      onPointermove: $event => this.draw($event),\n      onPointerup: () => this.stopDraw(),\n      onPointerleave: () => this.stopDraw(),\n      onPointercancel: () => this.stopDraw()\n    });\n  }\n\n});\n\nexport { VueDrawingCanvas as default };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}