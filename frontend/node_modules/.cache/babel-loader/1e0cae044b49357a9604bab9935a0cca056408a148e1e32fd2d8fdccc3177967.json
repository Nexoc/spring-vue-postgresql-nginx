{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/* eslint-disable */\nimport { mapGetters } from \"vuex\";\nexport default {\n  namespaced: true,\n  name: 'folder',\n  data() {\n    return {\n      title: null,\n      contentsToShow: {},\n      showUpdateField: false,\n      showContentsField: false\n    };\n  },\n  computed: {\n    ...mapGetters({\n      authenticated: 'auth/authenticated',\n      username: 'auth/username',\n      userId: 'auth/userId',\n      folders: 'auth/folders',\n      requestStatus: 'folder/requestStatus',\n      folderId: 'folder/folderId',\n      folderTitle: 'folder/title',\n      contents: \"folder/contents\",\n      file: 'content/file',\n      fileUrl: 'content/fileUrl'\n    })\n  },\n  methods: {\n    insertFolder() {\n      const data = {\n        title: this.title,\n        userId: this.userId\n      };\n      // send to folder.js actions insertFolderdata                    \n      this.$store.dispatch('folder/insertFolderData', data).then(() => {\n        if (this.requestStatus == 201) {\n          this.$store.dispatch('folder/findAllFolders', this.userId);\n          this.$router.push('/');\n          this.showUpdateField = false;\n          this.showContentsField = false;\n        }\n      });\n    },\n    updateFolder(folderId) {\n      console.log(\"FolderView.vue method update -> \" + folderId);\n      // TODO UPDATE title\n      console.log(\"methods ->updateFolder -> title: \" + this.title);\n      var data = {\n        \"folderId\": folderId,\n        \"title\": this.title,\n        \"userId\": this.userId\n      };\n      this.$store.dispatch('folder/updateFolder', data).then(() => {\n        console.log(\"status \" + this.requestStatus);\n        if (this.requestStatus == 200) {\n          this.showUpdateField = false;\n          this.showContentsField = false;\n          this.$store.dispatch('folder/findAllFolders', this.userId);\n          this.$router.push('/');\n        }\n      });\n    },\n    updateVariable(folderIdToBeUpdated) {\n      this.$store.dispatch('folder/updateFolderId', folderIdToBeUpdated);\n      this.showUpdateField = true;\n      this.showContentsField = false;\n      console.log(\"this.folderId = \" + this.folderId + \" and folderIdToBeUpdated = \" + folderIdToBeUpdated + \"showUpdateField -> \" + this.showUpdateField);\n    },\n    createContent(folderId) {\n      // http://localhost:8001/api/v1/users/'+folder.userId+'/folders/'+folder.folderId\n      console.log(\"FolderView.vue 85 method get f by id -> \" + folderId);\n      var data = {\n        \"folderId\": folderId,\n        \"userId\": this.userId\n      };\n      this.$store.dispatch('folder/findFolderById', data).then(() => {\n        this.showContentsField = false;\n        if (this.requestStatus == 200) {\n          this.showUpdateField = false;\n          this.file = null;\n          this.fileUrl = null;\n          this.$router.push('/dashboard');\n        }\n      });\n    },\n    getAllFoldersByUser() {\n      // send to folder.js actions findFolderById  \n      console.log(\"FolderView.vue 96 method get All\");\n      this.$store.dispatch('folder/findAllFolders', this.userId).then(() => {\n        this.showContentsField = false;\n        if (this.requestStatus == 200) {\n          this.showUpdateField = false;\n          this.$router.push('/');\n        }\n      });\n    },\n    deleteFolder(folderId) {\n      var data = {\n        \"folderId\": folderId,\n        \"userId\": this.userId\n      };\n      this.$store.dispatch('folder/deleteFolder', data).then(() => {\n        console.log(\"folderVuew .> methods delete -> response status -> \" + this.requestStatus);\n        if (this.requestStatus == 200) {\n          // console.log(\"DoldersView.vue -> methods -> delete folder -> if response 200 -> check userId: \" + this.userId)\n          this.$store.dispatch('folder/findAllFolders', this.userId);\n          this.showUpdateField = false;\n          this.showContentsField = false;\n          this.$router.push('/');\n        }\n      });\n    },\n    showContents(folderId) {\n      // console.log(\"Folder vue -> show content ->folder id \" + folderId)\n      var data = {\n        \"folderId\": folderId,\n        \"userId\": this.userId\n      };\n      this.$store.dispatch('folder/getContents', data)\n      //this.$store.dispatch('folder/findFolderById', data)   \n      .then(() => {\n        // console.log(\"folderVuew .> method show contents -> response status -> \" + this.requestStatus) \n        this.contentsToShow = {};\n        for (let i in this.contents) {\n          let content = {\n            \"id\": this.contents[i].contentId,\n            \"title\": this.contents[i].title,\n            \"content\": this.contents[i].content,\n            \"file\": this.contents[i].file,\n            \"path\": this.contents[i].filePath,\n            \"published\": this.contents[i].publishedOn\n          };\n          this.contentsToShow[i] = content;\n        }\n        if (this.requestStatus <= 200) {\n          // console.log(\"FoldersView.vue -> methods -> show content folder -> if response 200 -> check contents length: \" + this.contents.length)\n          // this.$store.dispatch('folder/findAllFolders', this.userId)\n          this.showUpdateField = false;\n          this.showContentsField = true;\n          this.$router.push('/');\n        }\n      });\n    },\n    deleteContent(contentId) {\n      // console.log(\"Folder vue -> delete content ->content id \" + contentId)\n      this.$store.dispatch('content/deleteContent', contentId).then(() => {\n        console.log(\"FoldersView.vue -> methods -> delete content  -> response status: \" + this.requestStatus);\n        if (this.requestStatus <= 200) {\n          this.$store.dispatch('folder/findAllFolders', this.userId);\n          this.showUpdateField = false;\n          // console.log(\"Folder vue -> delete content ->folder id \" + this.folderId)\n          this.showContents(this.folderId);\n          this.$router.push('/');\n        }\n      });\n    },\n    showContent(contentId) {\n      console.log(\"Folder vue -> delete content ->content id \" + contentId);\n      this.$store.dispatch('content/findContentById', contentId);\n      this.$router.push('/content/');\n    }\n  }\n};","map":{"version":3,"names":["mapGetters","namespaced","name","data","title","contentsToShow","showUpdateField","showContentsField","computed","authenticated","username","userId","folders","requestStatus","folderId","folderTitle","contents","file","fileUrl","methods","insertFolder","$store","dispatch","then","$router","push","updateFolder","console","log","updateVariable","folderIdToBeUpdated","createContent","getAllFoldersByUser","deleteFolder","showContents","i","content","contentId","filePath","publishedOn","deleteContent","showContent"],"sources":["/home/nexoc/JS/frontend/frontend-vue/src/components/FoldersView.vue"],"sourcesContent":[" <script>\n    /* eslint-disable */\n    import { mapGetters } from \"vuex\";\n  \n    export default {\n        namespaced: true,\n        name: 'folder',\n\n        data() {\n            return {   \n                title: null,\n                contentsToShow: {},\n                showUpdateField: false,\n                showContentsField: false,\n                }\n        },\n\n        computed: {  \n            ...mapGetters({\n                    authenticated: 'auth/authenticated',\n                    username: 'auth/username',\n                    userId: 'auth/userId',\n                    folders: 'auth/folders',\n                    requestStatus: 'folder/requestStatus',\n                    folderId: 'folder/folderId',\n                    folderTitle: 'folder/title',\n                    contents: \"folder/contents\",\n\n                    file: 'content/file',\n                    fileUrl: 'content/fileUrl',  \n            })\n        },\n\n        methods: { \n                insertFolder() {\n                    const data = {title: this.title, userId: this.userId}\n                    // send to folder.js actions insertFolderdata                    \n                    this.$store.dispatch('folder/insertFolderData', data)\n                    .then(() => {                        \n                    if (this.requestStatus == 201) {\n                        this.$store.dispatch('folder/findAllFolders', this.userId)\n                        this.$router.push('/') \n                        this.showUpdateField = false\n                        this.showContentsField = false\n                        }\n                    })\n                },    \n                updateFolder(folderId) {\n                    console.log(\"FolderView.vue method update -> \" + folderId) \n                    // TODO UPDATE title\n                    console.log(\"methods ->updateFolder -> title: \" + this.title)\n                    var data = {\n                        \"folderId\": folderId,\n                        \"title\": this.title,\n                        \"userId\": this.userId\n                    }  \n                    this.$store.dispatch('folder/updateFolder', data)                    \n                    .then(() => {     \n                        console.log(\"status \" + this.requestStatus)                  \n                        if (this.requestStatus == 200) {\n                            this.showUpdateField = false\n                            this.showContentsField = false\n                            this.$store.dispatch('folder/findAllFolders', this.userId)\n                            this.$router.push('/')                             \n                        }\n                    })\n                },                 \n                updateVariable(folderIdToBeUpdated){\n                    this.$store.dispatch('folder/updateFolderId', folderIdToBeUpdated) \n                    this.showUpdateField = true\n                    this.showContentsField = false\n                    console.log(\"this.folderId = \" + this.folderId + \" and folderIdToBeUpdated = \" + folderIdToBeUpdated \n                    + \"showUpdateField -> \" + this.showUpdateField)\n                },\n                createContent(folderId) {\n                    // http://localhost:8001/api/v1/users/'+folder.userId+'/folders/'+folder.folderId\n                    console.log(\"FolderView.vue 85 method get f by id -> \" + folderId)   \n                    var data = {\n                        \"folderId\": folderId,\n                        \"userId\": this.userId\n                    }\n                    this.$store.dispatch('folder/findFolderById', data)                    \n                    .then(() => {  \n                        this.showContentsField = false                     \n                        if (this.requestStatus == 200) {\n                            this.showUpdateField = false\n                            \n                            this.file = null\n                            this.fileUrl = null\n                            \n                            this.$router.push('/dashboard') \n                        }\n                    })\n                }, \n\n                getAllFoldersByUser() {\n                    // send to folder.js actions findFolderById  \n                    console.log(\"FolderView.vue 96 method get All\")                 \n                    this.$store.dispatch('folder/findAllFolders', this.userId)\n                    .then(() => {  \n                        this.showContentsField = false                      \n                        if (this.requestStatus == 200) {\n                            this.showUpdateField = false\n                            this.$router.push('/') \n                        }\n                    })\n                \n                },   \n                deleteFolder(folderId) {                    \n                    var data = {\n                        \"folderId\": folderId,\n                        \"userId\": this.userId\n                    }\n                    this.$store.dispatch('folder/deleteFolder', data)                    \n                    .then(() => {     \n                        console.log(\"folderVuew .> methods delete -> response status -> \" + this.requestStatus)    \n                        if (this.requestStatus == 200) {\n                            // console.log(\"DoldersView.vue -> methods -> delete folder -> if response 200 -> check userId: \" + this.userId)\n                            this.$store.dispatch('folder/findAllFolders', this.userId)\n                            this.showUpdateField = false\n                            this.showContentsField = false\n                            this.$router.push('/') \n                        }\n                    })  \n                },  \n                showContents(folderId) {\n                    // console.log(\"Folder vue -> show content ->folder id \" + folderId)\n                    var data = {\n                        \"folderId\": folderId,\n                        \"userId\": this.userId\n                    }\n                    this.$store.dispatch('folder/getContents', data)  \n                    //this.$store.dispatch('folder/findFolderById', data)   \n                    .then(() => {     \n                    // console.log(\"folderVuew .> method show contents -> response status -> \" + this.requestStatus) \n                    this.contentsToShow = {}\n                    for( let i in this.contents) {\n                            let content = {\n                                \"id\": this.contents[i].contentId,\n                                \"title\": this.contents[i].title,\n                                \"content\": this.contents[i].content,\n                                \"file\": this.contents[i].file,\n                                \"path\": this.contents[i].filePath,\n                                \"published\": this.contents[i].publishedOn\n                            }                          \n                            this.contentsToShow[i] = content                            \n                        }\n                    if (this.requestStatus <= 200) {\n                        // console.log(\"FoldersView.vue -> methods -> show content folder -> if response 200 -> check contents length: \" + this.contents.length)\n                        // this.$store.dispatch('folder/findAllFolders', this.userId)\n                        this.showUpdateField = false\n                        this.showContentsField = true\n                        this.$router.push('/') \n                        }\n                    })  \n                },       \n                deleteContent(contentId){\n                    // console.log(\"Folder vue -> delete content ->content id \" + contentId)\n                    this.$store.dispatch('content/deleteContent', contentId)  \n                    .then(() => {   \n                        console.log(\"FoldersView.vue -> methods -> delete content  -> response status: \" + this.requestStatus)\n                        if (this.requestStatus <= 200) {\n                            this.$store.dispatch('folder/findAllFolders', this.userId)\n                            this.showUpdateField = false\n                            // console.log(\"Folder vue -> delete content ->folder id \" + this.folderId)\n                            this.showContents(this.folderId)\n                            this.$router.push('/') \n                        }\n                    })\n                },  \n                showContent(contentId) {\n                    console.log(\"Folder vue -> delete content ->content id \" + contentId)\n                    this.$store.dispatch('content/findContentById', contentId)  \n                    this.$router.push('/content/') \n                }         \n        },\n    }\n      \n</script>\n\n\n<template>\n    <div class=\"body\">\n        <div id=\"app\" class=\"main\">\n            <img src=\"@/assets/logo.png\" alt=\"\">\n    \n            <div id='insertFolder'>\n                <form @submit.prevent=\"insertFolder\">\n                    <input type=\"text\" name=\"title\" placeholder=\"your title of new folder\" v-model=\"title\" />\n                    <button id='insertFolder'>insert new folder</button>\n                </form>\n            </div>\n    \n            <template v-if=\"requestStatus == 201\">\n                <div id='folderInfo'>\n                {{ requestStatus }} <br>\n                {{ folderId }} <br>\n                {{ folderTitle }} <br>\n                </div>                    \n            </template>\n    \n            <div id='showFoldersButton'>\n                <form @submit.prevent=\"getAllFoldersByUser\">\n                    <button id='showFolders'>show all folders</button>\n                </form>\n            </div>\n    \n            <template v-if=\"true\">\n                <table class=\"table\">\n                    <thead>\n                        <tr>\n                            <th>title</th>\n                            <th>Update</th>\n                            <th>Delete</th>\n                            <th>Show contents</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr v-for=\"folder in folders\" :key=\"folder.id\">\n                            <td>\n                                <form @submit.prevent=\"createContent(folder.folderId)\">\n                                    <button id='createContent'>{{ folder.title }} and id {{ folder.folderId }}</button>\n                                </form>\n                            </td>\n                            <td>\n                            <template v-if=!showUpdateField>  \n                                    <form @submit.prevent=\"updateVariable(folder.folderId)\">\n                                        <button id='updateVariable'>Update</button>\n                                    </form>\n                            </template>\n                            <template v-if=showUpdateField>   \n                                <template v-if=\"folder.folderId == this.folderId\">                    \n                                    <form @submit.prevent=\"updateFolder(this.folderId)\">                                   \n                                        <input type=\"text\" name=\"title\" placeholder=\"you new title\" v-model=\"title\"/>\n                                        <button id='updateFolder'>Update</button>\n                                    </form>  \n                                </template>                                                     \n                            </template>\n                            </td>\n                            <td>\n                                <form @submit.prevent=\"deleteFolder(folder.folderId)\">\n                                    <button id='deleteFolder'>Delete</button>\n                                </form>\n                            </td>\n                            <td>\n                                <form @submit.prevent=\"showContents(folder.folderId)\">\n                                    <button id='showContent'>show contents</button>\n                                </form>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n             </template>  \n    \n             <template v-if=\"showContentsField\">\n                <div v-for=\"content in contentsToShow\" :key=\"content.id\">\n                    <div class=\"table\">\n                    <p>Id {{ content.id }}</p>\n                    <p>file {{  content.file }}</p>\n                    <p>content {{ content.content }}</p>\n                    <p>file path {{  content.path }}</p>\n                    <p>Title {{  content.title }}</p>\n                    <p>published: {{  content.published }}</p>\n                    <div>\n                        <form @submit.prevent=\"deleteContent(content.id)\">\n                                    <button id='deleteContent'>Delete: {{ content.title }}</button>\n                        </form>   \n                        <form @submit.prevent=\"showContent(content.id)\">\n                                    <button id='showContent'>show: {{ content.title }}</button>\n                        </form>                       \n                    </div>\n                </div>\n                </div>    \n             </template>  \n           \n        </div>\n      </div>\n      </template>\n\n<style>\n    #insertFolder{\n        margin-left: 50px;\n    }\n    #folderInfo{\n        margin-left: 50px;\n    }\n    #showFoldersButton{\n        margin: 50px;\n    }\n    .table{\n        margin: 50px;\n        border: 10px solid red;\n    }\n\n</style>\n  \n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}