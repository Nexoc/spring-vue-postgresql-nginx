{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**! \n * hotkeys-js v3.13.7 \n * A simple micro-library for defining and dispatching keyboard shortcuts. It has no dependencies. \n * \n * Copyright (c) 2024 kenny wong <wowohoo@qq.com> \n * https://github.com/jaywcjlove/hotkeys-js.git \n * \n * @website: https://jaywcjlove.github.io/hotkeys-js\n \n * Licensed under the MIT license \n */\n\nconst isff = typeof navigator !== 'undefined' ? navigator.userAgent.toLowerCase().indexOf('firefox') > 0 : false;\n\n// 绑定事件\nfunction addEvent(object, event, method, useCapture) {\n  if (object.addEventListener) {\n    object.addEventListener(event, method, useCapture);\n  } else if (object.attachEvent) {\n    object.attachEvent(\"on\".concat(event), method);\n  }\n}\nfunction removeEvent(object, event, method, useCapture) {\n  if (object.removeEventListener) {\n    object.removeEventListener(event, method, useCapture);\n  } else if (object.detachEvent) {\n    object.detachEvent(\"on\".concat(event), method);\n  }\n}\n\n// 修饰键转换成对应的键码\nfunction getMods(modifier, key) {\n  const mods = key.slice(0, key.length - 1);\n  for (let i = 0; i < mods.length; i++) mods[i] = modifier[mods[i].toLowerCase()];\n  return mods;\n}\n\n// 处理传的key字符串转换成数组\nfunction getKeys(key) {\n  if (typeof key !== 'string') key = '';\n  key = key.replace(/\\s/g, ''); // 匹配任何空白字符,包括空格、制表符、换页符等等\n  const keys = key.split(','); // 同时设置多个快捷键，以','分割\n  let index = keys.lastIndexOf('');\n\n  // 快捷键可能包含','，需特殊处理\n  for (; index >= 0;) {\n    keys[index - 1] += ',';\n    keys.splice(index, 1);\n    index = keys.lastIndexOf('');\n  }\n  return keys;\n}\n\n// 比较修饰键的数组\nfunction compareArray(a1, a2) {\n  const arr1 = a1.length >= a2.length ? a1 : a2;\n  const arr2 = a1.length >= a2.length ? a2 : a1;\n  let isIndex = true;\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr2.indexOf(arr1[i]) === -1) isIndex = false;\n  }\n  return isIndex;\n}\n\n// Special Keys\nconst _keyMap = {\n  backspace: 8,\n  '⌫': 8,\n  tab: 9,\n  clear: 12,\n  enter: 13,\n  '↩': 13,\n  return: 13,\n  esc: 27,\n  escape: 27,\n  space: 32,\n  left: 37,\n  up: 38,\n  right: 39,\n  down: 40,\n  del: 46,\n  delete: 46,\n  ins: 45,\n  insert: 45,\n  home: 36,\n  end: 35,\n  pageup: 33,\n  pagedown: 34,\n  capslock: 20,\n  num_0: 96,\n  num_1: 97,\n  num_2: 98,\n  num_3: 99,\n  num_4: 100,\n  num_5: 101,\n  num_6: 102,\n  num_7: 103,\n  num_8: 104,\n  num_9: 105,\n  num_multiply: 106,\n  num_add: 107,\n  num_enter: 108,\n  num_subtract: 109,\n  num_decimal: 110,\n  num_divide: 111,\n  '⇪': 20,\n  ',': 188,\n  '.': 190,\n  '/': 191,\n  '`': 192,\n  '-': isff ? 173 : 189,\n  '=': isff ? 61 : 187,\n  ';': isff ? 59 : 186,\n  '\\'': 222,\n  '[': 219,\n  ']': 221,\n  '\\\\': 220\n};\n\n// Modifier Keys\nconst _modifier = {\n  // shiftKey\n  '⇧': 16,\n  shift: 16,\n  // altKey\n  '⌥': 18,\n  alt: 18,\n  option: 18,\n  // ctrlKey\n  '⌃': 17,\n  ctrl: 17,\n  control: 17,\n  // metaKey\n  '⌘': 91,\n  cmd: 91,\n  command: 91\n};\nconst modifierMap = {\n  16: 'shiftKey',\n  18: 'altKey',\n  17: 'ctrlKey',\n  91: 'metaKey',\n  shiftKey: 16,\n  ctrlKey: 17,\n  altKey: 18,\n  metaKey: 91\n};\nconst _mods = {\n  16: false,\n  18: false,\n  17: false,\n  91: false\n};\nconst _handlers = {};\n\n// F1~F12 special key\nfor (let k = 1; k < 20; k++) {\n  _keyMap[\"f\".concat(k)] = 111 + k;\n}\nlet _downKeys = []; // 记录摁下的绑定键\nlet winListendFocus = null; // window是否已经监听了focus事件\nlet _scope = 'all'; // 默认热键范围\nconst elementEventMap = new Map(); // 已绑定事件的节点记录\n\n// 返回键码\nconst code = x => _keyMap[x.toLowerCase()] || _modifier[x.toLowerCase()] || x.toUpperCase().charCodeAt(0);\nconst getKey = x => Object.keys(_keyMap).find(k => _keyMap[k] === x);\nconst getModifier = x => Object.keys(_modifier).find(k => _modifier[k] === x);\n\n// 设置获取当前范围（默认为'所有'）\nfunction setScope(scope) {\n  _scope = scope || 'all';\n}\n// 获取当前范围\nfunction getScope() {\n  return _scope || 'all';\n}\n// 获取摁下绑定键的键值\nfunction getPressedKeyCodes() {\n  return _downKeys.slice(0);\n}\nfunction getPressedKeyString() {\n  return _downKeys.map(c => getKey(c) || getModifier(c) || String.fromCharCode(c));\n}\nfunction getAllKeyCodes() {\n  const result = [];\n  Object.keys(_handlers).forEach(k => {\n    _handlers[k].forEach(_ref => {\n      let {\n        key,\n        scope,\n        mods,\n        shortcut\n      } = _ref;\n      result.push({\n        scope,\n        shortcut,\n        mods,\n        keys: key.split('+').map(v => code(v))\n      });\n    });\n  });\n  return result;\n}\n\n// 表单控件控件判断 返回 Boolean\n// hotkey is effective only when filter return true\nfunction filter(event) {\n  const target = event.target || event.srcElement;\n  const {\n    tagName\n  } = target;\n  let flag = true;\n  const isInput = tagName === 'INPUT' && !['checkbox', 'radio', 'range', 'button', 'file', 'reset', 'submit', 'color'].includes(target.type);\n  // ignore: isContentEditable === 'true', <input> and <textarea> when readOnly state is false, <select>\n  if (target.isContentEditable || (isInput || tagName === 'TEXTAREA' || tagName === 'SELECT') && !target.readOnly) {\n    flag = false;\n  }\n  return flag;\n}\n\n// 判断摁下的键是否为某个键，返回true或者false\nfunction isPressed(keyCode) {\n  if (typeof keyCode === 'string') {\n    keyCode = code(keyCode); // 转换成键码\n  }\n  return _downKeys.indexOf(keyCode) !== -1;\n}\n\n// 循环删除handlers中的所有 scope(范围)\nfunction deleteScope(scope, newScope) {\n  let handlers;\n  let i;\n\n  // 没有指定scope，获取scope\n  if (!scope) scope = getScope();\n  for (const key in _handlers) {\n    if (Object.prototype.hasOwnProperty.call(_handlers, key)) {\n      handlers = _handlers[key];\n      for (i = 0; i < handlers.length;) {\n        if (handlers[i].scope === scope) {\n          const deleteItems = handlers.splice(i, 1);\n          deleteItems.forEach(_ref2 => {\n            let {\n              element\n            } = _ref2;\n            return removeKeyEvent(element);\n          });\n        } else {\n          i++;\n        }\n      }\n    }\n  }\n\n  // 如果scope被删除，将scope重置为all\n  if (getScope() === scope) setScope(newScope || 'all');\n}\n\n// 清除修饰键\nfunction clearModifier(event) {\n  let key = event.keyCode || event.which || event.charCode;\n  const i = _downKeys.indexOf(key);\n\n  // 从列表中清除按压过的键\n  if (i >= 0) {\n    _downKeys.splice(i, 1);\n  }\n  // 特殊处理 cmmand 键，在 cmmand 组合快捷键 keyup 只执行一次的问题\n  if (event.key && event.key.toLowerCase() === 'meta') {\n    _downKeys.splice(0, _downKeys.length);\n  }\n\n  // 修饰键 shiftKey altKey ctrlKey (command||metaKey) 清除\n  if (key === 93 || key === 224) key = 91;\n  if (key in _mods) {\n    _mods[key] = false;\n\n    // 将修饰键重置为false\n    for (const k in _modifier) if (_modifier[k] === key) hotkeys[k] = false;\n  }\n}\nfunction unbind(keysInfo) {\n  // unbind(), unbind all keys\n  if (typeof keysInfo === 'undefined') {\n    Object.keys(_handlers).forEach(key => {\n      Array.isArray(_handlers[key]) && _handlers[key].forEach(info => eachUnbind(info));\n      delete _handlers[key];\n    });\n    removeKeyEvent(null);\n  } else if (Array.isArray(keysInfo)) {\n    // support like : unbind([{key: 'ctrl+a', scope: 's1'}, {key: 'ctrl-a', scope: 's2', splitKey: '-'}])\n    keysInfo.forEach(info => {\n      if (info.key) eachUnbind(info);\n    });\n  } else if (typeof keysInfo === 'object') {\n    // support like unbind({key: 'ctrl+a, ctrl+b', scope:'abc'})\n    if (keysInfo.key) eachUnbind(keysInfo);\n  } else if (typeof keysInfo === 'string') {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    // support old method\n    // eslint-disable-line\n    let [scope, method] = args;\n    if (typeof scope === 'function') {\n      method = scope;\n      scope = '';\n    }\n    eachUnbind({\n      key: keysInfo,\n      scope,\n      method,\n      splitKey: '+'\n    });\n  }\n}\n\n// 解除绑定某个范围的快捷键\nconst eachUnbind = _ref3 => {\n  let {\n    key,\n    scope,\n    method,\n    splitKey = '+'\n  } = _ref3;\n  const multipleKeys = getKeys(key);\n  multipleKeys.forEach(originKey => {\n    const unbindKeys = originKey.split(splitKey);\n    const len = unbindKeys.length;\n    const lastKey = unbindKeys[len - 1];\n    const keyCode = lastKey === '*' ? '*' : code(lastKey);\n    if (!_handlers[keyCode]) return;\n    // 判断是否传入范围，没有就获取范围\n    if (!scope) scope = getScope();\n    const mods = len > 1 ? getMods(_modifier, unbindKeys) : [];\n    const unbindElements = [];\n    _handlers[keyCode] = _handlers[keyCode].filter(record => {\n      // 通过函数判断，是否解除绑定，函数相等直接返回\n      const isMatchingMethod = method ? record.method === method : true;\n      const isUnbind = isMatchingMethod && record.scope === scope && compareArray(record.mods, mods);\n      if (isUnbind) unbindElements.push(record.element);\n      return !isUnbind;\n    });\n    unbindElements.forEach(element => removeKeyEvent(element));\n  });\n};\n\n// 对监听对应快捷键的回调函数进行处理\nfunction eventHandler(event, handler, scope, element) {\n  if (handler.element !== element) {\n    return;\n  }\n  let modifiersMatch;\n\n  // 看它是否在当前范围\n  if (handler.scope === scope || handler.scope === 'all') {\n    // 检查是否匹配修饰符（如果有返回true）\n    modifiersMatch = handler.mods.length > 0;\n    for (const y in _mods) {\n      if (Object.prototype.hasOwnProperty.call(_mods, y)) {\n        if (!_mods[y] && handler.mods.indexOf(+y) > -1 || _mods[y] && handler.mods.indexOf(+y) === -1) {\n          modifiersMatch = false;\n        }\n      }\n    }\n\n    // 调用处理程序，如果是修饰键不做处理\n    if (handler.mods.length === 0 && !_mods[16] && !_mods[18] && !_mods[17] && !_mods[91] || modifiersMatch || handler.shortcut === '*') {\n      handler.keys = [];\n      handler.keys = handler.keys.concat(_downKeys);\n      if (handler.method(event, handler) === false) {\n        if (event.preventDefault) event.preventDefault();else event.returnValue = false;\n        if (event.stopPropagation) event.stopPropagation();\n        if (event.cancelBubble) event.cancelBubble = true;\n      }\n    }\n  }\n}\n\n// 处理keydown事件\nfunction dispatch(event, element) {\n  const asterisk = _handlers['*'];\n  let key = event.keyCode || event.which || event.charCode;\n\n  // 表单控件过滤 默认表单控件不触发快捷键\n  if (!hotkeys.filter.call(this, event)) return;\n\n  // Gecko(Firefox)的command键值224，在Webkit(Chrome)中保持一致\n  // Webkit左右 command 键值不一样\n  if (key === 93 || key === 224) key = 91;\n\n  /**\n   * Collect bound keys\n   * If an Input Method Editor is processing key input and the event is keydown, return 229.\n   * https://stackoverflow.com/questions/25043934/is-it-ok-to-ignore-keydown-events-with-keycode-229\n   * http://lists.w3.org/Archives/Public/www-dom/2010JulSep/att-0182/keyCode-spec.html\n   */\n  if (_downKeys.indexOf(key) === -1 && key !== 229) _downKeys.push(key);\n  /**\n   * Jest test cases are required.\n   * ===============================\n   */\n  ['ctrlKey', 'altKey', 'shiftKey', 'metaKey'].forEach(keyName => {\n    const keyNum = modifierMap[keyName];\n    if (event[keyName] && _downKeys.indexOf(keyNum) === -1) {\n      _downKeys.push(keyNum);\n    } else if (!event[keyName] && _downKeys.indexOf(keyNum) > -1) {\n      _downKeys.splice(_downKeys.indexOf(keyNum), 1);\n    } else if (keyName === 'metaKey' && event[keyName] && _downKeys.length === 3) {\n      /**\n       * Fix if Command is pressed:\n       * ===============================\n       */\n      if (!(event.ctrlKey || event.shiftKey || event.altKey)) {\n        _downKeys = _downKeys.slice(_downKeys.indexOf(keyNum));\n      }\n    }\n  });\n  /**\n   * -------------------------------\n   */\n\n  if (key in _mods) {\n    _mods[key] = true;\n\n    // 将特殊字符的key注册到 hotkeys 上\n    for (const k in _modifier) {\n      if (_modifier[k] === key) hotkeys[k] = true;\n    }\n    if (!asterisk) return;\n  }\n\n  // 将 modifierMap 里面的修饰键绑定到 event 中\n  for (const e in _mods) {\n    if (Object.prototype.hasOwnProperty.call(_mods, e)) {\n      _mods[e] = event[modifierMap[e]];\n    }\n  }\n  /**\n   * https://github.com/jaywcjlove/hotkeys/pull/129\n   * This solves the issue in Firefox on Windows where hotkeys corresponding to special characters would not trigger.\n   * An example of this is ctrl+alt+m on a Swedish keyboard which is used to type μ.\n   * Browser support: https://caniuse.com/#feat=keyboardevent-getmodifierstate\n   */\n  if (event.getModifierState && !(event.altKey && !event.ctrlKey) && event.getModifierState('AltGraph')) {\n    if (_downKeys.indexOf(17) === -1) {\n      _downKeys.push(17);\n    }\n    if (_downKeys.indexOf(18) === -1) {\n      _downKeys.push(18);\n    }\n    _mods[17] = true;\n    _mods[18] = true;\n  }\n\n  // 获取范围 默认为 `all`\n  const scope = getScope();\n  // 对任何快捷键都需要做的处理\n  if (asterisk) {\n    for (let i = 0; i < asterisk.length; i++) {\n      if (asterisk[i].scope === scope && (event.type === 'keydown' && asterisk[i].keydown || event.type === 'keyup' && asterisk[i].keyup)) {\n        eventHandler(event, asterisk[i], scope, element);\n      }\n    }\n  }\n  // key 不在 _handlers 中返回\n  if (!(key in _handlers)) return;\n  const handlerKey = _handlers[key];\n  const keyLen = handlerKey.length;\n  for (let i = 0; i < keyLen; i++) {\n    if (event.type === 'keydown' && handlerKey[i].keydown || event.type === 'keyup' && handlerKey[i].keyup) {\n      if (handlerKey[i].key) {\n        const record = handlerKey[i];\n        const {\n          splitKey\n        } = record;\n        const keyShortcut = record.key.split(splitKey);\n        const _downKeysCurrent = []; // 记录当前按键键值\n        for (let a = 0; a < keyShortcut.length; a++) {\n          _downKeysCurrent.push(code(keyShortcut[a]));\n        }\n        if (_downKeysCurrent.sort().join('') === _downKeys.sort().join('')) {\n          // 找到处理内容\n          eventHandler(event, record, scope, element);\n        }\n      }\n    }\n  }\n}\nfunction hotkeys(key, option, method) {\n  _downKeys = [];\n  const keys = getKeys(key); // 需要处理的快捷键列表\n  let mods = [];\n  let scope = 'all'; // scope默认为all，所有范围都有效\n  let element = document; // 快捷键事件绑定节点\n  let i = 0;\n  let keyup = false;\n  let keydown = true;\n  let splitKey = '+';\n  let capture = false;\n  let single = false; // 单个callback\n\n  // 对为设定范围的判断\n  if (method === undefined && typeof option === 'function') {\n    method = option;\n  }\n  if (Object.prototype.toString.call(option) === '[object Object]') {\n    if (option.scope) scope = option.scope; // eslint-disable-line\n    if (option.element) element = option.element; // eslint-disable-line\n    if (option.keyup) keyup = option.keyup; // eslint-disable-line\n    if (option.keydown !== undefined) keydown = option.keydown; // eslint-disable-line\n    if (option.capture !== undefined) capture = option.capture; // eslint-disable-line\n    if (typeof option.splitKey === 'string') splitKey = option.splitKey; // eslint-disable-line\n    if (option.single === true) single = true; // eslint-disable-line\n  }\n  if (typeof option === 'string') scope = option;\n\n  // 如果只允许单个callback，先unbind\n  if (single) unbind(key, scope);\n\n  // 对于每个快捷键进行处理\n  for (; i < keys.length; i++) {\n    key = keys[i].split(splitKey); // 按键列表\n    mods = [];\n\n    // 如果是组合快捷键取得组合快捷键\n    if (key.length > 1) mods = getMods(_modifier, key);\n\n    // 将非修饰键转化为键码\n    key = key[key.length - 1];\n    key = key === '*' ? '*' : code(key); // *表示匹配所有快捷键\n\n    // 判断key是否在_handlers中，不在就赋一个空数组\n    if (!(key in _handlers)) _handlers[key] = [];\n    _handlers[key].push({\n      keyup,\n      keydown,\n      scope,\n      mods,\n      shortcut: keys[i],\n      method,\n      key: keys[i],\n      splitKey,\n      element\n    });\n  }\n  // 在全局document上设置快捷键\n  if (typeof element !== 'undefined' && window) {\n    if (!elementEventMap.has(element)) {\n      const keydownListener = function () {\n        let event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.event;\n        return dispatch(event, element);\n      };\n      const keyupListenr = function () {\n        let event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.event;\n        dispatch(event, element);\n        clearModifier(event);\n      };\n      elementEventMap.set(element, {\n        keydownListener,\n        keyupListenr,\n        capture\n      });\n      addEvent(element, 'keydown', keydownListener, capture);\n      addEvent(element, 'keyup', keyupListenr, capture);\n    }\n    if (!winListendFocus) {\n      const listener = () => {\n        _downKeys = [];\n      };\n      winListendFocus = {\n        listener,\n        capture\n      };\n      addEvent(window, 'focus', listener, capture);\n    }\n  }\n}\nfunction trigger(shortcut) {\n  let scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'all';\n  Object.keys(_handlers).forEach(key => {\n    const dataList = _handlers[key].filter(item => item.scope === scope && item.shortcut === shortcut);\n    dataList.forEach(data => {\n      if (data && data.method) {\n        data.method();\n      }\n    });\n  });\n}\n\n// 销毁事件,unbind之后判断element上是否还有键盘快捷键，如果没有移除监听\nfunction removeKeyEvent(element) {\n  const values = Object.values(_handlers).flat();\n  const findindex = values.findIndex(_ref4 => {\n    let {\n      element: el\n    } = _ref4;\n    return el === element;\n  });\n  if (findindex < 0) {\n    const {\n      keydownListener,\n      keyupListenr,\n      capture\n    } = elementEventMap.get(element) || {};\n    if (keydownListener && keyupListenr) {\n      removeEvent(element, 'keyup', keyupListenr, capture);\n      removeEvent(element, 'keydown', keydownListener, capture);\n      elementEventMap.delete(element);\n    }\n  }\n  if (values.length <= 0 || elementEventMap.size <= 0) {\n    // 移除所有的元素上的监听\n    const eventKeys = Object.keys(elementEventMap);\n    eventKeys.forEach(el => {\n      const {\n        keydownListener,\n        keyupListenr,\n        capture\n      } = elementEventMap.get(el) || {};\n      if (keydownListener && keyupListenr) {\n        removeEvent(el, 'keyup', keyupListenr, capture);\n        removeEvent(el, 'keydown', keydownListener, capture);\n        elementEventMap.delete(el);\n      }\n    });\n    // 清空 elementEventMap\n    elementEventMap.clear();\n    // 清空 _handlers\n    Object.keys(_handlers).forEach(key => delete _handlers[key]);\n    // 移除window上的focus监听\n    if (winListendFocus) {\n      const {\n        listener,\n        capture\n      } = winListendFocus;\n      removeEvent(window, 'focus', listener, capture);\n      winListendFocus = null;\n    }\n  }\n}\nconst _api = {\n  getPressedKeyString,\n  setScope,\n  getScope,\n  deleteScope,\n  getPressedKeyCodes,\n  getAllKeyCodes,\n  isPressed,\n  filter,\n  trigger,\n  unbind,\n  keyMap: _keyMap,\n  modifier: _modifier,\n  modifierMap\n};\nfor (const a in _api) {\n  if (Object.prototype.hasOwnProperty.call(_api, a)) {\n    hotkeys[a] = _api[a];\n  }\n}\nif (typeof window !== 'undefined') {\n  const _hotkeys = window.hotkeys;\n  hotkeys.noConflict = deep => {\n    if (deep && window.hotkeys === hotkeys) {\n      window.hotkeys = _hotkeys;\n    }\n    return hotkeys;\n  };\n  window.hotkeys = hotkeys;\n}\nexport { hotkeys as default };","map":{"version":3,"names":["isff","navigator","userAgent","toLowerCase","indexOf","addEvent","object","event","method","useCapture","addEventListener","attachEvent","concat","removeEvent","removeEventListener","detachEvent","getMods","modifier","key","mods","slice","length","i","getKeys","replace","keys","split","index","lastIndexOf","splice","compareArray","a1","a2","arr1","arr2","isIndex","_keyMap","backspace","tab","clear","enter","return","esc","escape","space","left","up","right","down","del","delete","ins","insert","home","end","pageup","pagedown","capslock","num_0","num_1","num_2","num_3","num_4","num_5","num_6","num_7","num_8","num_9","num_multiply","num_add","num_enter","num_subtract","num_decimal","num_divide","_modifier","shift","alt","option","ctrl","control","cmd","command","modifierMap","shiftKey","ctrlKey","altKey","metaKey","_mods","_handlers","k","_downKeys","winListendFocus","_scope","elementEventMap","Map","code","x","toUpperCase","charCodeAt","getKey","Object","find","getModifier","setScope","scope","getScope","getPressedKeyCodes","getPressedKeyString","map","c","String","fromCharCode","getAllKeyCodes","result","forEach","_ref","shortcut","push","v","filter","target","srcElement","tagName","flag","isInput","includes","type","isContentEditable","readOnly","isPressed","keyCode","deleteScope","newScope","handlers","prototype","hasOwnProperty","call","deleteItems","_ref2","element","removeKeyEvent","clearModifier","which","charCode","hotkeys","unbind","keysInfo","Array","isArray","info","eachUnbind","_len","arguments","args","_key","splitKey","_ref3","multipleKeys","originKey","unbindKeys","len","lastKey","unbindElements","record","isMatchingMethod","isUnbind","eventHandler","handler","modifiersMatch","y","preventDefault","returnValue","stopPropagation","cancelBubble","dispatch","asterisk","keyName","keyNum","e","getModifierState","keydown","keyup","handlerKey","keyLen","keyShortcut","_downKeysCurrent","a","sort","join","document","capture","single","undefined","toString","window","has","keydownListener","keyupListenr","set","listener","trigger","dataList","item","data","values","flat","findindex","findIndex","_ref4","el","get","size","eventKeys","_api","keyMap","_hotkeys","noConflict","deep","default"],"sources":["/home/nexoc/JS/frontend/frontend-vue/node_modules/hotkeys-js/dist/hotkeys.esm.js"],"sourcesContent":["/**! \n * hotkeys-js v3.13.7 \n * A simple micro-library for defining and dispatching keyboard shortcuts. It has no dependencies. \n * \n * Copyright (c) 2024 kenny wong <wowohoo@qq.com> \n * https://github.com/jaywcjlove/hotkeys-js.git \n * \n * @website: https://jaywcjlove.github.io/hotkeys-js\n \n * Licensed under the MIT license \n */\n\nconst isff = typeof navigator !== 'undefined' ? navigator.userAgent.toLowerCase().indexOf('firefox') > 0 : false;\n\n// 绑定事件\nfunction addEvent(object, event, method, useCapture) {\n  if (object.addEventListener) {\n    object.addEventListener(event, method, useCapture);\n  } else if (object.attachEvent) {\n    object.attachEvent(\"on\".concat(event), method);\n  }\n}\nfunction removeEvent(object, event, method, useCapture) {\n  if (object.removeEventListener) {\n    object.removeEventListener(event, method, useCapture);\n  } else if (object.detachEvent) {\n    object.detachEvent(\"on\".concat(event), method);\n  }\n}\n\n// 修饰键转换成对应的键码\nfunction getMods(modifier, key) {\n  const mods = key.slice(0, key.length - 1);\n  for (let i = 0; i < mods.length; i++) mods[i] = modifier[mods[i].toLowerCase()];\n  return mods;\n}\n\n// 处理传的key字符串转换成数组\nfunction getKeys(key) {\n  if (typeof key !== 'string') key = '';\n  key = key.replace(/\\s/g, ''); // 匹配任何空白字符,包括空格、制表符、换页符等等\n  const keys = key.split(','); // 同时设置多个快捷键，以','分割\n  let index = keys.lastIndexOf('');\n\n  // 快捷键可能包含','，需特殊处理\n  for (; index >= 0;) {\n    keys[index - 1] += ',';\n    keys.splice(index, 1);\n    index = keys.lastIndexOf('');\n  }\n  return keys;\n}\n\n// 比较修饰键的数组\nfunction compareArray(a1, a2) {\n  const arr1 = a1.length >= a2.length ? a1 : a2;\n  const arr2 = a1.length >= a2.length ? a2 : a1;\n  let isIndex = true;\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr2.indexOf(arr1[i]) === -1) isIndex = false;\n  }\n  return isIndex;\n}\n\n// Special Keys\nconst _keyMap = {\n  backspace: 8,\n  '⌫': 8,\n  tab: 9,\n  clear: 12,\n  enter: 13,\n  '↩': 13,\n  return: 13,\n  esc: 27,\n  escape: 27,\n  space: 32,\n  left: 37,\n  up: 38,\n  right: 39,\n  down: 40,\n  del: 46,\n  delete: 46,\n  ins: 45,\n  insert: 45,\n  home: 36,\n  end: 35,\n  pageup: 33,\n  pagedown: 34,\n  capslock: 20,\n  num_0: 96,\n  num_1: 97,\n  num_2: 98,\n  num_3: 99,\n  num_4: 100,\n  num_5: 101,\n  num_6: 102,\n  num_7: 103,\n  num_8: 104,\n  num_9: 105,\n  num_multiply: 106,\n  num_add: 107,\n  num_enter: 108,\n  num_subtract: 109,\n  num_decimal: 110,\n  num_divide: 111,\n  '⇪': 20,\n  ',': 188,\n  '.': 190,\n  '/': 191,\n  '`': 192,\n  '-': isff ? 173 : 189,\n  '=': isff ? 61 : 187,\n  ';': isff ? 59 : 186,\n  '\\'': 222,\n  '[': 219,\n  ']': 221,\n  '\\\\': 220\n};\n\n// Modifier Keys\nconst _modifier = {\n  // shiftKey\n  '⇧': 16,\n  shift: 16,\n  // altKey\n  '⌥': 18,\n  alt: 18,\n  option: 18,\n  // ctrlKey\n  '⌃': 17,\n  ctrl: 17,\n  control: 17,\n  // metaKey\n  '⌘': 91,\n  cmd: 91,\n  command: 91\n};\nconst modifierMap = {\n  16: 'shiftKey',\n  18: 'altKey',\n  17: 'ctrlKey',\n  91: 'metaKey',\n  shiftKey: 16,\n  ctrlKey: 17,\n  altKey: 18,\n  metaKey: 91\n};\nconst _mods = {\n  16: false,\n  18: false,\n  17: false,\n  91: false\n};\nconst _handlers = {};\n\n// F1~F12 special key\nfor (let k = 1; k < 20; k++) {\n  _keyMap[\"f\".concat(k)] = 111 + k;\n}\n\nlet _downKeys = []; // 记录摁下的绑定键\nlet winListendFocus = null; // window是否已经监听了focus事件\nlet _scope = 'all'; // 默认热键范围\nconst elementEventMap = new Map(); // 已绑定事件的节点记录\n\n// 返回键码\nconst code = x => _keyMap[x.toLowerCase()] || _modifier[x.toLowerCase()] || x.toUpperCase().charCodeAt(0);\nconst getKey = x => Object.keys(_keyMap).find(k => _keyMap[k] === x);\nconst getModifier = x => Object.keys(_modifier).find(k => _modifier[k] === x);\n\n// 设置获取当前范围（默认为'所有'）\nfunction setScope(scope) {\n  _scope = scope || 'all';\n}\n// 获取当前范围\nfunction getScope() {\n  return _scope || 'all';\n}\n// 获取摁下绑定键的键值\nfunction getPressedKeyCodes() {\n  return _downKeys.slice(0);\n}\nfunction getPressedKeyString() {\n  return _downKeys.map(c => getKey(c) || getModifier(c) || String.fromCharCode(c));\n}\nfunction getAllKeyCodes() {\n  const result = [];\n  Object.keys(_handlers).forEach(k => {\n    _handlers[k].forEach(_ref => {\n      let {\n        key,\n        scope,\n        mods,\n        shortcut\n      } = _ref;\n      result.push({\n        scope,\n        shortcut,\n        mods,\n        keys: key.split('+').map(v => code(v))\n      });\n    });\n  });\n  return result;\n}\n\n// 表单控件控件判断 返回 Boolean\n// hotkey is effective only when filter return true\nfunction filter(event) {\n  const target = event.target || event.srcElement;\n  const {\n    tagName\n  } = target;\n  let flag = true;\n  const isInput = tagName === 'INPUT' && !['checkbox', 'radio', 'range', 'button', 'file', 'reset', 'submit', 'color'].includes(target.type);\n  // ignore: isContentEditable === 'true', <input> and <textarea> when readOnly state is false, <select>\n  if (target.isContentEditable || (isInput || tagName === 'TEXTAREA' || tagName === 'SELECT') && !target.readOnly) {\n    flag = false;\n  }\n  return flag;\n}\n\n// 判断摁下的键是否为某个键，返回true或者false\nfunction isPressed(keyCode) {\n  if (typeof keyCode === 'string') {\n    keyCode = code(keyCode); // 转换成键码\n  }\n  return _downKeys.indexOf(keyCode) !== -1;\n}\n\n// 循环删除handlers中的所有 scope(范围)\nfunction deleteScope(scope, newScope) {\n  let handlers;\n  let i;\n\n  // 没有指定scope，获取scope\n  if (!scope) scope = getScope();\n  for (const key in _handlers) {\n    if (Object.prototype.hasOwnProperty.call(_handlers, key)) {\n      handlers = _handlers[key];\n      for (i = 0; i < handlers.length;) {\n        if (handlers[i].scope === scope) {\n          const deleteItems = handlers.splice(i, 1);\n          deleteItems.forEach(_ref2 => {\n            let {\n              element\n            } = _ref2;\n            return removeKeyEvent(element);\n          });\n        } else {\n          i++;\n        }\n      }\n    }\n  }\n\n  // 如果scope被删除，将scope重置为all\n  if (getScope() === scope) setScope(newScope || 'all');\n}\n\n// 清除修饰键\nfunction clearModifier(event) {\n  let key = event.keyCode || event.which || event.charCode;\n  const i = _downKeys.indexOf(key);\n\n  // 从列表中清除按压过的键\n  if (i >= 0) {\n    _downKeys.splice(i, 1);\n  }\n  // 特殊处理 cmmand 键，在 cmmand 组合快捷键 keyup 只执行一次的问题\n  if (event.key && event.key.toLowerCase() === 'meta') {\n    _downKeys.splice(0, _downKeys.length);\n  }\n\n  // 修饰键 shiftKey altKey ctrlKey (command||metaKey) 清除\n  if (key === 93 || key === 224) key = 91;\n  if (key in _mods) {\n    _mods[key] = false;\n\n    // 将修饰键重置为false\n    for (const k in _modifier) if (_modifier[k] === key) hotkeys[k] = false;\n  }\n}\nfunction unbind(keysInfo) {\n  // unbind(), unbind all keys\n  if (typeof keysInfo === 'undefined') {\n    Object.keys(_handlers).forEach(key => {\n      Array.isArray(_handlers[key]) && _handlers[key].forEach(info => eachUnbind(info));\n      delete _handlers[key];\n    });\n    removeKeyEvent(null);\n  } else if (Array.isArray(keysInfo)) {\n    // support like : unbind([{key: 'ctrl+a', scope: 's1'}, {key: 'ctrl-a', scope: 's2', splitKey: '-'}])\n    keysInfo.forEach(info => {\n      if (info.key) eachUnbind(info);\n    });\n  } else if (typeof keysInfo === 'object') {\n    // support like unbind({key: 'ctrl+a, ctrl+b', scope:'abc'})\n    if (keysInfo.key) eachUnbind(keysInfo);\n  } else if (typeof keysInfo === 'string') {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    // support old method\n    // eslint-disable-line\n    let [scope, method] = args;\n    if (typeof scope === 'function') {\n      method = scope;\n      scope = '';\n    }\n    eachUnbind({\n      key: keysInfo,\n      scope,\n      method,\n      splitKey: '+'\n    });\n  }\n}\n\n// 解除绑定某个范围的快捷键\nconst eachUnbind = _ref3 => {\n  let {\n    key,\n    scope,\n    method,\n    splitKey = '+'\n  } = _ref3;\n  const multipleKeys = getKeys(key);\n  multipleKeys.forEach(originKey => {\n    const unbindKeys = originKey.split(splitKey);\n    const len = unbindKeys.length;\n    const lastKey = unbindKeys[len - 1];\n    const keyCode = lastKey === '*' ? '*' : code(lastKey);\n    if (!_handlers[keyCode]) return;\n    // 判断是否传入范围，没有就获取范围\n    if (!scope) scope = getScope();\n    const mods = len > 1 ? getMods(_modifier, unbindKeys) : [];\n    const unbindElements = [];\n    _handlers[keyCode] = _handlers[keyCode].filter(record => {\n      // 通过函数判断，是否解除绑定，函数相等直接返回\n      const isMatchingMethod = method ? record.method === method : true;\n      const isUnbind = isMatchingMethod && record.scope === scope && compareArray(record.mods, mods);\n      if (isUnbind) unbindElements.push(record.element);\n      return !isUnbind;\n    });\n    unbindElements.forEach(element => removeKeyEvent(element));\n  });\n};\n\n// 对监听对应快捷键的回调函数进行处理\nfunction eventHandler(event, handler, scope, element) {\n  if (handler.element !== element) {\n    return;\n  }\n  let modifiersMatch;\n\n  // 看它是否在当前范围\n  if (handler.scope === scope || handler.scope === 'all') {\n    // 检查是否匹配修饰符（如果有返回true）\n    modifiersMatch = handler.mods.length > 0;\n    for (const y in _mods) {\n      if (Object.prototype.hasOwnProperty.call(_mods, y)) {\n        if (!_mods[y] && handler.mods.indexOf(+y) > -1 || _mods[y] && handler.mods.indexOf(+y) === -1) {\n          modifiersMatch = false;\n        }\n      }\n    }\n\n    // 调用处理程序，如果是修饰键不做处理\n    if (handler.mods.length === 0 && !_mods[16] && !_mods[18] && !_mods[17] && !_mods[91] || modifiersMatch || handler.shortcut === '*') {\n      handler.keys = [];\n      handler.keys = handler.keys.concat(_downKeys);\n      if (handler.method(event, handler) === false) {\n        if (event.preventDefault) event.preventDefault();else event.returnValue = false;\n        if (event.stopPropagation) event.stopPropagation();\n        if (event.cancelBubble) event.cancelBubble = true;\n      }\n    }\n  }\n}\n\n// 处理keydown事件\nfunction dispatch(event, element) {\n  const asterisk = _handlers['*'];\n  let key = event.keyCode || event.which || event.charCode;\n\n  // 表单控件过滤 默认表单控件不触发快捷键\n  if (!hotkeys.filter.call(this, event)) return;\n\n  // Gecko(Firefox)的command键值224，在Webkit(Chrome)中保持一致\n  // Webkit左右 command 键值不一样\n  if (key === 93 || key === 224) key = 91;\n\n  /**\n   * Collect bound keys\n   * If an Input Method Editor is processing key input and the event is keydown, return 229.\n   * https://stackoverflow.com/questions/25043934/is-it-ok-to-ignore-keydown-events-with-keycode-229\n   * http://lists.w3.org/Archives/Public/www-dom/2010JulSep/att-0182/keyCode-spec.html\n   */\n  if (_downKeys.indexOf(key) === -1 && key !== 229) _downKeys.push(key);\n  /**\n   * Jest test cases are required.\n   * ===============================\n   */\n  ['ctrlKey', 'altKey', 'shiftKey', 'metaKey'].forEach(keyName => {\n    const keyNum = modifierMap[keyName];\n    if (event[keyName] && _downKeys.indexOf(keyNum) === -1) {\n      _downKeys.push(keyNum);\n    } else if (!event[keyName] && _downKeys.indexOf(keyNum) > -1) {\n      _downKeys.splice(_downKeys.indexOf(keyNum), 1);\n    } else if (keyName === 'metaKey' && event[keyName] && _downKeys.length === 3) {\n      /**\n       * Fix if Command is pressed:\n       * ===============================\n       */\n      if (!(event.ctrlKey || event.shiftKey || event.altKey)) {\n        _downKeys = _downKeys.slice(_downKeys.indexOf(keyNum));\n      }\n    }\n  });\n  /**\n   * -------------------------------\n   */\n\n  if (key in _mods) {\n    _mods[key] = true;\n\n    // 将特殊字符的key注册到 hotkeys 上\n    for (const k in _modifier) {\n      if (_modifier[k] === key) hotkeys[k] = true;\n    }\n    if (!asterisk) return;\n  }\n\n  // 将 modifierMap 里面的修饰键绑定到 event 中\n  for (const e in _mods) {\n    if (Object.prototype.hasOwnProperty.call(_mods, e)) {\n      _mods[e] = event[modifierMap[e]];\n    }\n  }\n  /**\n   * https://github.com/jaywcjlove/hotkeys/pull/129\n   * This solves the issue in Firefox on Windows where hotkeys corresponding to special characters would not trigger.\n   * An example of this is ctrl+alt+m on a Swedish keyboard which is used to type μ.\n   * Browser support: https://caniuse.com/#feat=keyboardevent-getmodifierstate\n   */\n  if (event.getModifierState && !(event.altKey && !event.ctrlKey) && event.getModifierState('AltGraph')) {\n    if (_downKeys.indexOf(17) === -1) {\n      _downKeys.push(17);\n    }\n    if (_downKeys.indexOf(18) === -1) {\n      _downKeys.push(18);\n    }\n    _mods[17] = true;\n    _mods[18] = true;\n  }\n\n  // 获取范围 默认为 `all`\n  const scope = getScope();\n  // 对任何快捷键都需要做的处理\n  if (asterisk) {\n    for (let i = 0; i < asterisk.length; i++) {\n      if (asterisk[i].scope === scope && (event.type === 'keydown' && asterisk[i].keydown || event.type === 'keyup' && asterisk[i].keyup)) {\n        eventHandler(event, asterisk[i], scope, element);\n      }\n    }\n  }\n  // key 不在 _handlers 中返回\n  if (!(key in _handlers)) return;\n  const handlerKey = _handlers[key];\n  const keyLen = handlerKey.length;\n  for (let i = 0; i < keyLen; i++) {\n    if (event.type === 'keydown' && handlerKey[i].keydown || event.type === 'keyup' && handlerKey[i].keyup) {\n      if (handlerKey[i].key) {\n        const record = handlerKey[i];\n        const {\n          splitKey\n        } = record;\n        const keyShortcut = record.key.split(splitKey);\n        const _downKeysCurrent = []; // 记录当前按键键值\n        for (let a = 0; a < keyShortcut.length; a++) {\n          _downKeysCurrent.push(code(keyShortcut[a]));\n        }\n        if (_downKeysCurrent.sort().join('') === _downKeys.sort().join('')) {\n          // 找到处理内容\n          eventHandler(event, record, scope, element);\n        }\n      }\n    }\n  }\n}\nfunction hotkeys(key, option, method) {\n  _downKeys = [];\n  const keys = getKeys(key); // 需要处理的快捷键列表\n  let mods = [];\n  let scope = 'all'; // scope默认为all，所有范围都有效\n  let element = document; // 快捷键事件绑定节点\n  let i = 0;\n  let keyup = false;\n  let keydown = true;\n  let splitKey = '+';\n  let capture = false;\n  let single = false; // 单个callback\n\n  // 对为设定范围的判断\n  if (method === undefined && typeof option === 'function') {\n    method = option;\n  }\n  if (Object.prototype.toString.call(option) === '[object Object]') {\n    if (option.scope) scope = option.scope; // eslint-disable-line\n    if (option.element) element = option.element; // eslint-disable-line\n    if (option.keyup) keyup = option.keyup; // eslint-disable-line\n    if (option.keydown !== undefined) keydown = option.keydown; // eslint-disable-line\n    if (option.capture !== undefined) capture = option.capture; // eslint-disable-line\n    if (typeof option.splitKey === 'string') splitKey = option.splitKey; // eslint-disable-line\n    if (option.single === true) single = true; // eslint-disable-line\n  }\n  if (typeof option === 'string') scope = option;\n\n  // 如果只允许单个callback，先unbind\n  if (single) unbind(key, scope);\n\n  // 对于每个快捷键进行处理\n  for (; i < keys.length; i++) {\n    key = keys[i].split(splitKey); // 按键列表\n    mods = [];\n\n    // 如果是组合快捷键取得组合快捷键\n    if (key.length > 1) mods = getMods(_modifier, key);\n\n    // 将非修饰键转化为键码\n    key = key[key.length - 1];\n    key = key === '*' ? '*' : code(key); // *表示匹配所有快捷键\n\n    // 判断key是否在_handlers中，不在就赋一个空数组\n    if (!(key in _handlers)) _handlers[key] = [];\n    _handlers[key].push({\n      keyup,\n      keydown,\n      scope,\n      mods,\n      shortcut: keys[i],\n      method,\n      key: keys[i],\n      splitKey,\n      element\n    });\n  }\n  // 在全局document上设置快捷键\n  if (typeof element !== 'undefined' && window) {\n    if (!elementEventMap.has(element)) {\n      const keydownListener = function () {\n        let event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.event;\n        return dispatch(event, element);\n      };\n      const keyupListenr = function () {\n        let event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.event;\n        dispatch(event, element);\n        clearModifier(event);\n      };\n      elementEventMap.set(element, {\n        keydownListener,\n        keyupListenr,\n        capture\n      });\n      addEvent(element, 'keydown', keydownListener, capture);\n      addEvent(element, 'keyup', keyupListenr, capture);\n    }\n    if (!winListendFocus) {\n      const listener = () => {\n        _downKeys = [];\n      };\n      winListendFocus = {\n        listener,\n        capture\n      };\n      addEvent(window, 'focus', listener, capture);\n    }\n  }\n}\nfunction trigger(shortcut) {\n  let scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'all';\n  Object.keys(_handlers).forEach(key => {\n    const dataList = _handlers[key].filter(item => item.scope === scope && item.shortcut === shortcut);\n    dataList.forEach(data => {\n      if (data && data.method) {\n        data.method();\n      }\n    });\n  });\n}\n\n// 销毁事件,unbind之后判断element上是否还有键盘快捷键，如果没有移除监听\nfunction removeKeyEvent(element) {\n  const values = Object.values(_handlers).flat();\n  const findindex = values.findIndex(_ref4 => {\n    let {\n      element: el\n    } = _ref4;\n    return el === element;\n  });\n  if (findindex < 0) {\n    const {\n      keydownListener,\n      keyupListenr,\n      capture\n    } = elementEventMap.get(element) || {};\n    if (keydownListener && keyupListenr) {\n      removeEvent(element, 'keyup', keyupListenr, capture);\n      removeEvent(element, 'keydown', keydownListener, capture);\n      elementEventMap.delete(element);\n    }\n  }\n  if (values.length <= 0 || elementEventMap.size <= 0) {\n    // 移除所有的元素上的监听\n    const eventKeys = Object.keys(elementEventMap);\n    eventKeys.forEach(el => {\n      const {\n        keydownListener,\n        keyupListenr,\n        capture\n      } = elementEventMap.get(el) || {};\n      if (keydownListener && keyupListenr) {\n        removeEvent(el, 'keyup', keyupListenr, capture);\n        removeEvent(el, 'keydown', keydownListener, capture);\n        elementEventMap.delete(el);\n      }\n    });\n    // 清空 elementEventMap\n    elementEventMap.clear();\n    // 清空 _handlers\n    Object.keys(_handlers).forEach(key => delete _handlers[key]);\n    // 移除window上的focus监听\n    if (winListendFocus) {\n      const {\n        listener,\n        capture\n      } = winListendFocus;\n      removeEvent(window, 'focus', listener, capture);\n      winListendFocus = null;\n    }\n  }\n}\nconst _api = {\n  getPressedKeyString,\n  setScope,\n  getScope,\n  deleteScope,\n  getPressedKeyCodes,\n  getAllKeyCodes,\n  isPressed,\n  filter,\n  trigger,\n  unbind,\n  keyMap: _keyMap,\n  modifier: _modifier,\n  modifierMap\n};\nfor (const a in _api) {\n  if (Object.prototype.hasOwnProperty.call(_api, a)) {\n    hotkeys[a] = _api[a];\n  }\n}\nif (typeof window !== 'undefined') {\n  const _hotkeys = window.hotkeys;\n  hotkeys.noConflict = deep => {\n    if (deep && window.hotkeys === hotkeys) {\n      window.hotkeys = _hotkeys;\n    }\n    return hotkeys;\n  };\n  window.hotkeys = hotkeys;\n}\n\nexport { hotkeys as default };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}